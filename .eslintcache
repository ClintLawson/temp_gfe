[{"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\index.js":"1","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\reportWebVitals.js":"2","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\App.js":"3","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\themes\\companyTheme.js":"4","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\globalComponents\\FormButton.js":"5","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\globalComponents\\SingleInputUncontrolledAndButton.js":"6","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\AppIndex.js":"7","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\TableServiceSheets.js":"8","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\CreateServiceSheet.js":"9","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\AppTitle.js":"10","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\AppSideMenu.js":"11","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\ButtonCreateSheet.js":"12","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\DialogFormAddPart.js":"13","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\TableForParts.js":"14","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\TableForTechHours.js":"15","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\PreSeasonForm.js":"16","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\RefrigerationStartUpForm.js":"17","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\FormRefrigerationSingleUnit.js":"18","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\DiaglogRefrigerationUnitStartUp.js":"19","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\DialogFormEditHours.js":"20","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\FormRefrigCompressorSingle.js":"21","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\NotFound.js":"22","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\AppLayout.js":"23","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\AppsMenu.js":"24","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\Router_AppTitle.js":"25","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\Router_InAppSideMenu.js":"26","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\InAppSideMenu.js":"27","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\FormActionBar.js":"28","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\FormActionButtons.js":"29","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\globalComponents\\PopupTimeout.js":"30","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\AppSplash.js":"31","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\data\\Reducer.js":"32","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\data\\Actions.js":"33","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\MessagePopup.js":"34","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\Index_Router.js":"35","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\Title.js":"36","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\SideMenu.js":"37","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\views\\Home.js":"38","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\globalComponents\\MainButton.js":"39","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\fakeAPI\\Storages.js":"40","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\fakeAPI\\ServiceSheets.js":"41","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\fakeAPI\\Customers.js":"42","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\data\\usersSlice.js":"43","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\fakeAPI\\ServiceTechs.js":"44","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\globalComponents\\FlexTable.js":"45","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\data\\storagesSlice.js":"46","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\data\\customersSlice.js":"47","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\data\\partsSlice.js":"48","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\fakeAPI\\Parts.js":"49","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\data\\dataTemplates.js":"50","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\data\\AppDataLegend.js":"51","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\ToolbarForSheetsTable.js":"52","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\views\\DataTable.js":"53"},{"size":2500,"mtime":1614714101093,"results":"54","hashOfConfig":"55"},{"size":362,"mtime":499162500000,"results":"56","hashOfConfig":"55"},{"size":1598,"mtime":1614622861748,"results":"57","hashOfConfig":"55"},{"size":930,"mtime":1611085342110,"results":"58","hashOfConfig":"55"},{"size":1219,"mtime":1614632103197,"results":"59","hashOfConfig":"55"},{"size":1507,"mtime":1611526608148,"results":"60","hashOfConfig":"55"},{"size":5747,"mtime":1614767905445,"results":"61","hashOfConfig":"55"},{"size":9513,"mtime":1614655063800,"results":"62","hashOfConfig":"55"},{"size":53459,"mtime":1614896363875,"results":"63","hashOfConfig":"55"},{"size":77,"mtime":1608225059403,"results":"64","hashOfConfig":"55"},{"size":4331,"mtime":1614899627555,"results":"65","hashOfConfig":"55"},{"size":1116,"mtime":1608668321113,"results":"66","hashOfConfig":"55"},{"size":7169,"mtime":1611297280297,"results":"67","hashOfConfig":"55"},{"size":4628,"mtime":1610066563045,"results":"68","hashOfConfig":"55"},{"size":8231,"mtime":1612890350758,"results":"69","hashOfConfig":"55"},{"size":21696,"mtime":1612799817170,"results":"70","hashOfConfig":"55"},{"size":10421,"mtime":1612889943897,"results":"71","hashOfConfig":"55"},{"size":10799,"mtime":1611644018887,"results":"72","hashOfConfig":"55"},{"size":11082,"mtime":1611462458992,"results":"73","hashOfConfig":"55"},{"size":4395,"mtime":1611072972680,"results":"74","hashOfConfig":"55"},{"size":13927,"mtime":1611642084123,"results":"75","hashOfConfig":"55"},{"size":144,"mtime":1607645226174,"results":"76","hashOfConfig":"55"},{"size":5451,"mtime":1614751138305,"results":"77","hashOfConfig":"55"},{"size":4127,"mtime":1614725282628,"results":"78","hashOfConfig":"55"},{"size":368,"mtime":1614618995959,"results":"79","hashOfConfig":"55"},{"size":435,"mtime":1614618995959,"results":"80","hashOfConfig":"55"},{"size":4096,"mtime":1614899358240,"results":"81","hashOfConfig":"55"},{"size":942,"mtime":1614273599021,"results":"82","hashOfConfig":"55"},{"size":4470,"mtime":1614767191600,"results":"83","hashOfConfig":"55"},{"size":926,"mtime":1613001842404,"results":"84","hashOfConfig":"55"},{"size":922,"mtime":1607392358752,"results":"85","hashOfConfig":"55"},{"size":4612,"mtime":1614769925585,"results":"86","hashOfConfig":"55"},{"size":1697,"mtime":1614767605944,"results":"87","hashOfConfig":"55"},{"size":3564,"mtime":1614561847102,"results":"88","hashOfConfig":"55"},{"size":329,"mtime":1614626774874,"results":"89","hashOfConfig":"55"},{"size":72,"mtime":1614623588015,"results":"90","hashOfConfig":"55"},{"size":2401,"mtime":1614723556946,"results":"91","hashOfConfig":"55"},{"size":378,"mtime":1614626782236,"results":"92","hashOfConfig":"55"},{"size":1289,"mtime":1614766474432,"results":"93","hashOfConfig":"55"},{"size":2810,"mtime":1614770369037,"results":"94","hashOfConfig":"55"},{"size":6039,"mtime":1614748387090,"results":"95","hashOfConfig":"55"},{"size":1291,"mtime":1614770440293,"results":"96","hashOfConfig":"55"},{"size":648,"mtime":1614650932312,"results":"97","hashOfConfig":"55"},{"size":712,"mtime":1614743709569,"results":"98","hashOfConfig":"55"},{"size":9162,"mtime":1614753993080,"results":"99","hashOfConfig":"55"},{"size":646,"mtime":1614711580668,"results":"100","hashOfConfig":"55"},{"size":657,"mtime":1614709697668,"results":"101","hashOfConfig":"55"},{"size":609,"mtime":1614713925917,"results":"102","hashOfConfig":"55"},{"size":1151,"mtime":1614714009112,"results":"103","hashOfConfig":"55"},{"size":1370,"mtime":1614883440423,"results":"104","hashOfConfig":"55"},{"size":3198,"mtime":1614883616075,"results":"105","hashOfConfig":"55"},{"size":4961,"mtime":1614762962223,"results":"106","hashOfConfig":"55"},{"size":5125,"mtime":1614900214658,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"111"},"1qj1hg7",{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"111"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"111"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"111"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"111"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"111"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"111"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"111"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"111"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"111"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"111"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"111"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"162"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"111"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"111"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"111"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"111"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"111"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"111"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"111"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"111"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"111"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"111"},"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\index.js",["239"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\n// import AppSplash from './components/layouts/AppSplash' \n\nimport { applyMiddleware, createStore, compose, combineReducers} from '@reduxjs/toolkit'\nimport { Provider } from 'react-redux';\n\nimport { offline } from '@redux-offline/redux-offline'\nimport offlineConfig from '@redux-offline/redux-offline/lib/defaults';\n\n// reducers\nimport serviceSheetsReducer from './components/appService/data/Reducer'\nimport usersSlice from './components/appHome/data/usersSlice';\nimport customersSlice from './components/appHome/data/customersSlice';\nimport storagesSlice from './components/appHome/data/storagesSlice';\nimport partsSlice from './components/appHome/data/partsSlice';\n\nconst discard = (error, _action, _retries) => {\n  console.log('DISCARD!!!',error)\n  const { request, response } = error;\n  console.log(request)\n  if (!response) return false; // There was no response\n  return 400 <= response.status && response.status < 500;\n};\n\n// https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup\n// const composeTools = (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose\n\nconst store = createStore(\n  combineReducers({\n    users: usersSlice,\n    parts: partsSlice,\n    customers: customersSlice,\n    storages: storagesSlice, \n    serviceSheets: serviceSheetsReducer\n  }),\n  // preloadedState, //pass in a state object like {user: \"id-234\"} where 'user' is a reducer & 'id-234' is its initial state\n  // ...more on that at https://redux.js.org/recipes/structuring-reducers/initializing-state \n\n  // https://github.com/zalmoxisus/redux-devtools-extension#12-advanced-store-setup\n  // composeTools(\n  compose(\n  //     // applyMiddleware(\n  //     //     // loggerMiddleware  //etc...\n  //     //     thunk\n  //     // ),\n      offline({...offlineConfig, discard })\n  )\n);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <React.Fragment>\n\n     {/* wrap this in some MSAL stuff */}\n      <Provider store={store} > \n          <App />\n      </Provider>\n    \n    </React.Fragment>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["240","241"],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\App.js",["242","243","244","245"],"import {React, useState} from 'react'\nimport '../App.css';\nimport AppLayout from './layouts/AppLayout'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport companyTheme from './themes/companyTheme'\nimport { Redirect, Router } from '@reach/router'\n\nimport { useSelector } from 'react-redux'\n\nimport DashboardApp_Router from './appHome/Index_Router' \nimport ServiceApp_Router from './appService/AppIndex'\n\nimport NotFound from './layouts/NotFound'\nimport AppSplash from './layouts/AppSplash'\n\nexport default function App(props) {\n  // const appSplash = (\n  //   <AppSplash/>\n  // )\n  \n  const state = useSelector(state => state)\n\n  console.log(state)\n\n  return (\n    <div className=\"App\">\n      <CssBaseline/>\n      <ThemeProvider theme={ companyTheme }>\n\n        {/* {\n          state.offline.isBusy ? \n\n          <AppSplash /> :\n           */}\n\n          <>\n          {/* APP STARTS HERE!! */}\n            <Router>\n              {/* app layout handles the header and side menu */}\n              <AppLayout path='/' >\n\n                {/* REDIRECT '/' sets up home page */}\n                <Redirect from=\"/\" to=\"home\" noThrow/>\n\n                {/* ROUTE to App here!!! */}\n                <DashboardApp_Router path='home/*' />\n                <ServiceApp_Router path='service_sheets/*' />\n                \n                {/* <NotFound default /> */}\n                <NotFound path='/not_found' default/>\n\n              </AppLayout>\n            </Router>\n          </>\n\n        {/* } */}\n\n      </ThemeProvider>\n    </div>\n  );\n}\n","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\themes\\companyTheme.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\globalComponents\\FormButton.js",["246"],"import React from 'react'\r\nimport { ButtonBase,\r\n        makeStyles,\r\n        Typography\r\n    } from '@material-ui/core'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root:{\r\n        color: theme.palette.primary.contrastText,\r\n        backgroundColor: theme.palette.primary.main,\r\n        padding: '2px 7px',\r\n        margin: '10px',\r\n        fontSize: '15px',\r\n        borderRadius: '3px'\r\n    },\r\n    dangerous:{\r\n        backgroundColor: theme.palette.secondary.main\r\n        // backgroundColor: 'green'\r\n    }\r\n}))\r\n\r\nconst FormButton = (props) => {\r\n    const classes = useStyles()\r\n    return(\r\n        <span hidden={props.hidden}\r\n            style={props.style}\r\n        >\r\n            <ButtonBase \r\n                elevation={3}\r\n                className={`${classes.root} \r\n                    ${props.buttontype === 'dangerous' ? classes.dangerous : ''}\r\n\r\n                `} \r\n                onClick={props.onClick} \r\n                style={{backgroundColor:`${props.bgColor}`}} \r\n                disabled={props.disabled}\r\n                buttontype={props.buttontype}\r\n            >\r\n                {props.children}\r\n            </ButtonBase>\r\n        </span>\r\n    )\r\n}\r\nexport default FormButton;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\globalComponents\\SingleInputUncontrolledAndButton.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\AppIndex.js",["247","248","249","250","251","252","253","254","255","256","257","258","259"],"import { Router, Redirect } from '@reach/router'\r\nimport React, { useEffect, useState } from 'react'\r\nimport Requests from './TableServiceSheets'\r\nimport CreateSheet from './CreateServiceSheet'\r\nimport SheetsTable from './views/DataTable'\r\nimport FlexTable from '../globalComponents/FlexTable'\r\n\r\nimport MessagePopup from './MessagePopup'\r\n\r\nimport {useDispatch, useSelector} from 'react-redux'\r\n\r\n// Actions\r\nimport { CREATE_SERVICE_SHEET, SET_MESSAGE_POPUP, SET_SELECTED_SHEET, UPDATE_SERVICE_SHEET  } from './data/Actions'\r\n\r\nimport fakeSheets from '../fakeAPI/ServiceSheets'\r\nimport fakeCustomers from '../fakeAPI/Customers'\r\nimport fakeStorages from '../fakeAPI/Storages'\r\nimport { selectUserById, selectUsersAll } from '../appHome/data/usersSlice'\r\nimport { Checkbox } from '@material-ui/core'\r\nimport { DataGrid } from '@material-ui/data-grid'\r\nimport { selectSheetDrafts, selectSheetRequests, selectSheetsJobs, selectSheetsMyJobs, selectSheetsByStatusValue, selectSheetsCorporate } from './data/Reducer'\r\nimport { selectStoragesAll, selectStoragesById } from '../appHome/data/storagesSlice'\r\nimport { selectCustomersAll, selectCustomersById } from '../appHome/data/customersSlice'\r\nimport { selectPartsAll } from '../appHome/data/partsSlice'\r\n\r\n// const test = () => useDispatch()\r\n\r\nconst Router_AppContent = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    \r\n    // const [customers, setCustomers] = useState(fakeCustomers)\r\n    // const [storages, setStorages] = useState(fakeStorages)\r\n    \r\n    const state = useSelector( state => state )\r\n\r\n    const users = selectUsersAll(state)\r\n    const customers = selectCustomersAll(state)\r\n    const storages = selectStoragesAll(state)\r\n    const parts = selectPartsAll(state)\r\n    \r\n    \r\n    const messagePopup = state.serviceSheets.messagePopup\r\n    const serviceSheets = state.serviceSheets.sheetsInProcess || []\r\n    const selectedSheet = state.serviceSheets.selectedSheet || undefined\r\n\r\n    useEffect(()=>{\r\n        console.log('state change detected', selectedSheet)\r\n    },[state])\r\n    \r\n    const createNewSheet = (newSheet) => {\r\n        console.log('creating ...')        \r\n        dispatch(CREATE_SERVICE_SHEET(newSheet, 'clint@gellert.com'))\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {/* messagePopup controlled by redux state */}\r\n            <MessagePopup \r\n                messagePopup={messagePopup || null}\r\n                onClose={()=>dispatch(SET_MESSAGE_POPUP())}\r\n            />\r\n\r\n            <Router>\r\n                {/* DEFAULT  */}\r\n                <Redirect from='/' to='requests' noThrow/>\r\n\r\n                <CreateSheet path='/create' \r\n                    submitNew={createNewSheet} //function\r\n                    update={(s)=>dispatch(UPDATE_SERVICE_SHEET(s))}\r\n                    selectedSheet={selectedSheet} //sheet instance\r\n                    unMountSelected={()=>dispatch(SET_SELECTED_SHEET())}\r\n                    // update={} //function \r\n                    \r\n                    customers={customers}\r\n                    storages={storages}\r\n                    parts={parts}\r\n                    serviceTechs={users}\r\n                />\r\n\r\n                <SheetsTable path='/drafts'\r\n                    // title={'Drafts'}\r\n                    state={state}\r\n                    serviceSheets={selectSheetDrafts(state)}\r\n                />\r\n\r\n                <SheetsTable path='/uploading'\r\n                    // title={'Pending Uploads'}\r\n                    state={state}\r\n                    serviceSheets={[]}\r\n                />\r\n\r\n                <SheetsTable path='/requests'\r\n                    // title={'Service Requests'}\r\n                    state={state}\r\n                    serviceSheets={selectSheetRequests(state)}\r\n                />\r\n\r\n                <SheetsTable path='/jobs'\r\n                    // title={'Service Jobs'}\r\n                    state={state}\r\n                    serviceSheets={selectSheetsJobs(state)}\r\n                />\r\n\r\n                <SheetsTable path='/jobs/my_jobs'\r\n                    // title={'My Jobs'}\r\n                    state={state}\r\n                    serviceSheets={selectSheetsMyJobs(state, '1234')}\r\n                />\r\n\r\n                <SheetsTable path='/jobs/in_progress'\r\n                    // title={'Work In Progress'}\r\n                    state={state}\r\n                    serviceSheets={selectSheetsByStatusValue(state, '40')}\r\n                />\r\n\r\n                <SheetsTable path='/jobs/department_review'\r\n                    // title={'Ready to Review'}\r\n                    state={state}\r\n                    serviceSheets={selectSheetsByStatusValue(state, '50')}\r\n                />\r\n\r\n                <SheetsTable path='/corporate'\r\n                    // title={'Corporate Review'}\r\n                    state={state}\r\n                    serviceSheets={selectSheetsCorporate(state)}\r\n                />\r\n\r\n                <SheetsTable path='/corporate/preliminary_review'\r\n                    // title={'Preliminary Corporate Review'}\r\n                    state={state}\r\n                    serviceSheets={selectSheetsByStatusValue(state, '60')}\r\n                />\r\n\r\n                <SheetsTable path='/corporate/accounting_review'\r\n                    // title={'Accounting Review'}\r\n\r\n                    state={state}\r\n                    serviceSheets={selectSheetsByStatusValue(state, '70')}\r\n                />\r\n\r\n                <SheetsTable path='/corporate/invoicing'\r\n                    // title={'Ready to Invoice'}\r\n\r\n                    state={state}\r\n                    serviceSheets={selectSheetsByStatusValue(state, '80')}\r\n                />\r\n\r\n            </Router>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default Router_AppContent;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\TableServiceSheets.js",["260","261","262","263","264","265","266","267","268","269","270","271","272","273","274"],"import React, { useState } from 'react'\r\nimport ButtonCreateSheet from './ButtonCreateSheet'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { IconButton, ButtonBase, Button } from '@material-ui/core'\r\nimport { Search, MoreVert, FilterList, AddBox, AddCircle, Add, SignalWifi1BarLockSharp, Settings, Flag, OfflineBoltSharp, CloudUpload, CheckCircle, Check, Error, ErrorOutline} from '@material-ui/icons'\r\nimport { makeStyles, Toolbar, Typography } from '@material-ui/core';\r\nimport FormButton from '../globalComponents/FormButton';\r\nimport MainButton from '../globalComponents/MainButton';\r\nimport { navigate } from '@reach/router';\r\n\r\n// PROPS \r\n// sheets - \r\n    //  they must be prefiltered to get only the intended sheets (ex. display requests must be filtered for only requests prior to display)\r\n    //  further more they must filtered in such a way that ones with errors that are in the next phase still show up in the previous\r\n// noRowsMessage - this will be displayed in place of \r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n    paper: {\r\n        // backgroundColor: theme.palette.primary.contrastText\r\n        margin: '10px',\r\n        maxWidth: '1200px',\r\n        // maxWidth: '100%',  \r\n        // padding: '10px',\r\n        // height: '1000px',\r\n        backgroundColor: 'white',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            margin: '0px',\r\n        }\r\n    },\r\n    tableHead: {\r\n        '&.MuiTableCell-head':{\r\n            color: theme.palette.primary.light,\r\n            fontWeight: '600'\r\n        }\r\n    },\r\n    table:{\r\n        // maxHeight: 'calc(100vh - 48px)',\r\n    },\r\n    grow: {\r\n        flexGrow: 2,\r\n    },\r\n    search: {\r\n        display: 'flex',\r\n        // padding: '1px 5px',\r\n        // background: 'grey'\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        // backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        // '&:hover': {\r\n        //   backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        // },\r\n        marginLeft: 0,\r\n        width: '150px',\r\n        [theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(1),\r\n          width: 'auto',\r\n        },\r\n        [theme.breakpoints.up('md')]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: '250px',\r\n          },\r\n        // background: theme.palette.info.light,\r\n        background: 'lightgrey',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'inherit'\r\n        },\r\n        display: 'none',\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 1),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        // pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    searchInput:{\r\n        marginLeft: '35px',\r\n        marginRight: '5px'\r\n    },\r\n    desktopOnly:{\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'inherit'\r\n        },\r\n        display: 'none'\r\n    },\r\n    cellPadding:{\r\n        '&.MuiTableCell-root':{\r\n            padding:'11px'\r\n        }\r\n    }\r\n}))\r\n\r\nconst Rows = (props) => {\r\n    const classes = useStyles()\r\n\r\n    return(\r\n    // <React.Fragment>\r\n        // {\r\n            props.sheets.map(s => \r\n                <TableRow hover={true} key={s.uuid} >\r\n                    <TableCell >\r\n                        {s.customer_id}\r\n                    </TableCell >\r\n                    <TableCell >\r\n                        {s.storage_id}\r\n                    </TableCell >\r\n                    <TableCell >\r\n                        {s.urgency}\r\n                    </TableCell >\r\n                    <TableCell >\r\n                        {/* {s.status} */}Nov-3\r\n                    </TableCell >\r\n                    {/* <TableCell >\r\n                        {s.status}\r\n                    </TableCell > */}\r\n                    <TableCell >\r\n                        {s.type_of_work}\r\n                    </TableCell >\r\n                    <TableCell >\r\n                        {s.requested_by}\r\n                    </TableCell >\r\n                    {/* <TableCell >\r\n                        {s.status}\r\n                    </TableCell > */}\r\n                    <TableCell  className={classes.cellPadding}>\r\n                        {s.flagged ? <Flag style={{color:'red'}}/>: ''}\r\n                        {s.flagged ? <CloudUpload style={{color:'orange'}}/>: <Check style={{color:'green'}}/>}\r\n                        {s.flagged ? <ErrorOutline style={{color:'red'}}/>: ''}\r\n                    </TableCell >\r\n\r\n\r\n                </TableRow>\r\n            )\r\n        // }\r\n    // </React.Fragment>\r\n)}\r\n\r\nconst NoRows = (props) => {\r\n    return(\r\n        <TableRow>\r\n            <TableCell style={{'textAlign': 'center', 'color':'grey'}} colSpan={4} >\r\n                <Typography variant='h6'>\r\n                    {props.noRowsMessage}\r\n                </Typography>\r\n            </TableCell>\r\n        </TableRow>\r\n    )\r\n}\r\n\r\n// PROPS to be passed in => tableData, tableTitle, tableHeaders?, \r\nconst Requests = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    const [requests, setRequests] = useState('v')    \r\n\r\n    return(\r\n        <React.Fragment>\r\n        <Paper className={classes.paper} elevation={3}>\r\n\r\n            <Toolbar className={classes.toolbar}>\r\n                {/* <ButtonCreateSheet label={'Request'}/> */}\r\n                {/* <Button startIcon={<Add />} color={'primary'} > sheet </Button> */}\r\n                {/* <FormButton >\r\n                    sheet\r\n                </FormButton> */}\r\n                <MainButton\r\n                    startIcon={<Add />}\r\n                    size='large'\r\n                    onClick={()=>{navigate('/service_sheets/create')}}\r\n                >\r\n                    sheet &nbsp;\r\n                </MainButton>\r\n                \r\n                <div className={classes.grow} />\r\n                <div className={classes.search}>\r\n                    <div className={classes.searchIcon}>\r\n                        <Search />\r\n                    </div>\r\n                    <InputBase\r\n                        className={classes.searchInput}\r\n                        placeholder=\"Search…\"\r\n                        inputProps={{ 'aria-label': 'search' }}\r\n                    />\r\n                </div>\r\n                <IconButton \r\n                    // className={classes.desktopOnly}\r\n                    aria-label=\"display more actions\" \r\n                    edge=\"end\" \r\n                    color=\"inherit\"\r\n                >\r\n                    {/* <MoreVert /> */}\r\n                    {/* <FilterList /> */}\r\n                    <Settings />\r\n                </IconButton>\r\n            </Toolbar>\r\n\r\n            <TableContainer className={classes.table}>\r\n                <Table  >\r\n                    <TableHead >\r\n                        <TableRow >\r\n                            <TableCell className={classes.tableHead} >\r\n                                Customer\r\n                            </TableCell>\r\n                            <TableCell className={classes.tableHead}>\r\n                                Storage\r\n                            </TableCell>\r\n                            <TableCell className={classes.tableHead}>\r\n                                Urgency\r\n                            </TableCell>\r\n                            <TableCell className={classes.tableHead}>\r\n                                Date Created\r\n                            </TableCell>\r\n                            {/* <TableCell className={classes.tableHead}>\r\n                                Status\r\n                            </TableCell> */}\r\n                            <TableCell className={classes.tableHead}>\r\n                                Work Type\r\n                            </TableCell>\r\n                            <TableCell className={classes.tableHead}>\r\n                                Requested By\r\n                            </TableCell>\r\n\r\n                            {/* <TableCell className={classes.tableHead}>\r\n                                Flagged\r\n                            </TableCell>\r\n                            <TableCell className={classes.tableHead}>\r\n                                Status\r\n                            </TableCell> */}\r\n                            <TableCell className={classes.tableHead}>\r\n                                {/* Details */}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>                \r\n                    <TableBody>\r\n\r\n                        { \r\n                            props.sheets.length > 0 ? \r\n                                <Rows \r\n                                    sheets={props.sheets} \r\n                                />  \r\n                                : <NoRows noRowsMessage={props.noRowsMessage}/> \r\n                        }\r\n                        \r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n        </Paper>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Requests;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\CreateServiceSheet.js",["275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305"],"import React, { useEffect, useState, useCallback } from 'react'\r\nimport Debounce from 'lodash/debounce'\r\n// import { createHistory, LocationProvider } from '@reach/router'\r\nimport FormButton from '../globalComponents/FormButton'\r\nimport TableForTechHours from './TableForTechHours'\r\nimport TableForParts from './TableForParts'\r\nimport DialogFormAddPart from './DialogFormAddPart'\r\nimport PreSeasonForm from './PreSeasonForm'\r\nimport DataLegend from './data/AppDataLegend'\r\n\r\nimport ExpandMore from '@material-ui/icons/ExpandMore'\r\nimport Event from '@material-ui/icons/Event'\r\nimport Add from '@material-ui/icons/Add'\r\nimport AddAPhoto from '@material-ui/icons/AddAPhoto'\r\n\r\nimport makeStyles from '@material-ui/core/styles/makeStyles'\r\nimport withStyles from '@material-ui/core/styles/withStyles'\r\n\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Box from '@material-ui/core/Box'\r\nimport Container from '@material-ui/core/Container'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport RadioGroup from '@material-ui/core/RadioGroup'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Accordion from '@material-ui/core/Accordion'\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { Button, ButtonGroup, debounce, Divider, FormHelperText, ListSubheader, Menu } from '@material-ui/core'\r\n\r\nimport Autocomplete from '@material-ui/lab/Autocomplete'\r\nimport RefrigerationStartUpForm from './RefrigerationStartUpForm'\r\nimport { ArrowBackIos, Flag, More, MoreVert, Publish, Save } from '@material-ui/icons'\r\nimport FormActionBar from './FormActionBar'\r\nimport FormActionButtons from './FormActionButtons'\r\nimport { globalHistory } from '@reach/router'\r\nimport { serviceSheetDefault } from './data/dataTemplates'\r\nimport AppDataLegend from './data/AppDataLegend'\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n    // appBar:{\r\n    //     backgroundColor: 'grey',\r\n    //     marginTop: '48px',\r\n    //     position:'relative',\r\n    //     borderRadius: '5px',\r\n    //     height: '48px'\r\n    // },\r\n    primaryBG:{\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    dangerousBG:{\r\n        backgroundColor: theme.palette.dangerousButton.main,\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    grayBG:{\r\n        backgroundColor: 'grey',\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    container: {\r\n    //   marginTop: '64px',\r\n      margin: '24px 0px',\r\n      maxWidth: '1050px',\r\n      paddingBottom:'20vh',\r\n      [theme.breakpoints.down('md')]: {\r\n        margin: '0px',\r\n        width: '100%',\r\n        padding: '0px',\r\n        paddingBottom:'20vh',\r\n      }, \r\n      [theme.breakpoints.up('lg')]: {\r\n        // margin: '10px 0px',\r\n        // paddingBottom:'20vh',\r\n      },\r\n    },\r\n    paper: {\r\n        padding: '10px',\r\n        [theme.breakpoints.up('lg')]: {\r\n            margin: '0px ',\r\n        },\r\n        [theme.breakpoints.down('xs')]: {\r\n            // margin: '0px ',\r\n            padding:'0px'\r\n        },\r\n    },\r\n    paperTable:{\r\n        backgroundColor: 'lightgrey'\r\n    },\r\n    accordion: {\r\n        '&.MuiAccordion-root.Mui-expanded':{\r\n            margin: '0px auto'\r\n        },\r\n    },\r\n    accordionSum: {\r\n        backgroundColor: 'black',\r\n        color: theme.palette.primary.contrastText,\r\n        '&.MuiAccordionSummary-root':{\r\n            maxHeight: '30px',\r\n            minHeight: '20px',\r\n        },\r\n        '& .MuiAccordion-root.Mui-expanded':{\r\n            marginTop: '0px'\r\n        },\r\n    },\r\n    expandIcon: {\r\n        color: theme.palette.primary.contrastText,\r\n    },\r\n    square: {\r\n        '& .MuiOutlinedInput-root': {\r\n            borderRadius: '0px'\r\n        },\r\n    },\r\n    selectFormControl:{\r\n        marginTop: '8px',\r\n        '& .MuiOutlinedInput-root':{\r\n            // borderRadius: '0px',\r\n        }\r\n    },\r\n    selectInputLabel: {\r\n        '&.MuiInputLabel-outlined': {\r\n            transform: 'translate(14px, 12px) scale(1)',\r\n        },\r\n        '&.MuiInputLabel-outlined.MuiInputLabel-shrink': {\r\n            transform: 'translate(14px, -6px) scale(0.75)'\r\n        }\r\n    },\r\n    inlineRadio:{\r\n        '&.MuiFormControl-root': {\r\n            flexDirection: 'row'\r\n        }, \r\n        '& .PrivateSwitchBase-root-89':{\r\n            padding: '0px'\r\n        }\r\n    },\r\n    radioLabel: {\r\n        margin: '10px 20px 4px 10px',\r\n    }\r\n\r\n}))\r\n\r\nconst AccordionCustom = withStyles({\r\n    root:{\r\n        '&.MuiAccordion-root.Mui-expanded':{\r\n            margin: '0px auto'\r\n        },\r\n    }\r\n})(Accordion)\r\n\r\nconst AccordionSumCustom = withStyles((theme)=> ({\r\n    root:{\r\n        backgroundColor: 'black',\r\n        // borderTop: 'darkgrey solid 1px',\r\n        marginTop: '1px',\r\n        color: theme.palette.primary.contrastText,\r\n        [theme.breakpoints.up('md')]:{\r\n            '&.MuiAccordionSummary-root':{\r\n                maxHeight: '30px',\r\n                minHeight: '20px'\r\n            },\r\n        },\r\n        '&.Mui-focused':{\r\n            backgroundColor:'black'\r\n        },\r\n        '& .MuiAccordion-root.Mui-expanded':{\r\n            // marginTop: '0px'\r\n        },\r\n    }\r\n}))(AccordionSummary)\r\n\r\nconst AccordionDetailsCustom = withStyles({\r\n\r\n})(AccordionDetails)\r\n\r\nconst ExpandMoreIcon = withStyles((theme)=>({\r\n    root:{\r\n        color: theme.palette.primary.contrastText,\r\n    }\r\n}))(ExpandMore)\r\n\r\n\r\nconst AccordionSection = (props) => {\r\n    return(\r\n        <AccordionCustom \r\n            {...props}\r\n            elevation={0}\r\n        >\r\n            <AccordionSumCustom\r\n                expandIcon={<ExpandMoreIcon />}\r\n                >\r\n                {/* {props.summary} */}\r\n                <Box width='100%' display=\"flex\" justifyContent=\"center\" >\r\n                    { !props.sum1 ? <></> :\r\n\r\n                        <Box display='flex' width='100%' justifyContent='start' >\r\n                            <Typography>\r\n                                {props.sum1}\r\n                            </Typography> \r\n                        </Box>\r\n                    }\r\n                    { !props.sum2 ? <></> :\r\n                        <Box width='100%' justifyContent='center' >\r\n                            <Typography align='center'>\r\n                            {   props.sum2} \r\n                            </Typography>\r\n                        </Box>\r\n                    }\r\n                    { !props.sum3 ? <></> :\r\n                        <Box width='100%' justifyContent='end' >\r\n                            <Typography align='right'>\r\n                                {props.sum3}\r\n                            </Typography>\r\n                        </Box>\r\n                    }\r\n                </Box>\r\n            </AccordionSumCustom>\r\n            <AccordionDetailsCustom>\r\n                <Grid container direction='row' justify='space-between' spacing={2} alignItems='stretch'>\r\n                    {props.children}\r\n                </Grid>\r\n            </AccordionDetailsCustom>\r\n        </AccordionCustom>\r\n    )\r\n}\r\n\r\nconst SelectInputCustom = (props) => {\r\n    return(\r\n        <FormControl variant=\"outlined\" margin='dense' fullWidth >\r\n            <InputLabel id={props.id}>{props.title}</InputLabel>\r\n            <Select\r\n                labelId={props.id}\r\n                id={props.selectId}\r\n                defaultValue={props.defaultValue ? props.defaultValue : ''}\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n                label={props.label}\r\n                {...props}\r\n            >\r\n                {props.children}\r\n            </Select>\r\n            {\r\n                props.error ? \r\n                <FormHelperText  children={props.helperText}/>\r\n                :\r\n                ''\r\n            }\r\n        </FormControl>\r\n)}\r\n\r\n// MAIN STARTS HERE\r\nconst CreateServiceSheet = (props) => {\r\n    const classes = useStyles()\r\n    const dataLegend = DataLegend().service_sheet\r\n \r\n    // Incoming data\r\n    const serviceTechs = props.serviceTechs\r\n    const customers = props.customers\r\n    const storages = props.storages\r\n    const partsCatalog = props.parts\r\n    const defaultForm = serviceSheetDefault()\r\n    \r\n    \r\n    //Handle FORM DATA\r\n    const [ form, setForm ] = React.useState(props.selectedSheet || defaultForm)\r\n    const [errors, setErrors] = React.useState({})\r\n\r\n    const refreshForm = () => {\r\n        console.log('selected....',props.selectedSheet, form)\r\n        const refreshedForm = (props.selectedSheet || defaultForm)\r\n        // must reset both in order for the 'save as draft' protection to kick in\r\n        setForm(refreshedForm)\r\n        setOriginalForm(refreshedForm)  \r\n        window.onbeforeunload = undefined  \r\n        // setIsOriginalForm(true)\r\n    }\r\n\r\n    // detects when the form has been replaced with the redux 'selectedSheet'\r\n    useEffect(()=>{\r\n        refreshForm()\r\n    },[props.selectedSheet])\r\n\r\n    useEffect(()=>{\r\n        //unmounts the selected item when this component navigated away from\r\n        return props.unMountSelected \r\n    },[])\r\n    \r\n    // Preserve Original form to detect Changes & Alert if there are unsaved changes before renavigating\r\n    const [orginalForm, setOriginalForm] = React.useState(form)\r\n    \r\n    // form controlls\r\n    const [ dialogAddPart, setDialogAddPart ] = React.useState(false) \r\n    const openDialogAddPart = () => {\r\n        setDialogAddPart(true)\r\n    }\r\n    const closeDialogAddPart = () => {\r\n        setDialogAddPart(false)\r\n    }\r\n\r\n    // Utility functions\r\n    const getTechShortName = (tech_id) => {\r\n        const tech = serviceTechs.filter(t => t.id === tech_id)[0]\r\n        return `${tech.firstName} ${tech.lastName[0].toUpperCase()}`\r\n    }\r\n    const getTechFullName = (tech_id) => {\r\n        const tech = serviceTechs.filter(t => t.id === tech_id)[0]\r\n        return `${tech.firstName} ${tech.lastName}`\r\n    }\r\n\r\n\r\n    const updateForm = (field, e) => {\r\n        setForm({...form, [field] : e.target.value})\r\n    }\r\n\r\n        \r\n    const updateRequestPhotos = (e) =>{\r\n        // react docs say this should not be controlled. \r\n        setForm({...form, request_photos: e.target.files})\r\n    }\r\n\r\n    const addPart = (newPart) => {\r\n        setForm({...form, \r\n            parts:[...form.parts, newPart]\r\n        }) \r\n    } \r\n    \r\n    const removePart = () => {\r\n\r\n    }\r\n\r\n    const updateAllTechsList = (event) => {\r\n        const existing = (tech) => { return form.all_techs.filter(t => t.id === tech)[0] }\r\n        let all_techs =  event.target.value.map((tech) =>  \r\n            existing(tech) ? existing(tech) : \r\n            {\r\n                'id':`${tech}`,\r\n                'work_hours':'',\r\n                'no_charge_hours': '',\r\n                'notes' : ''\r\n            }   \r\n        )\r\n        setForm({...form,\r\n            'all_techs': all_techs\r\n        })\r\n    };\r\n\r\n    const removeTech = (id) => {\r\n        setForm({...form, all_techs:form.all_techs.filter(t => t.id !== id)})\r\n    }\r\n\r\n    const handleStartedFinishedFields = (field, e) => {\r\n        const updatedForm = {...form, [field]: e.target.value}\r\n        const elapsed_hours = calculateElapsedHours(updatedForm)\r\n        if(elapsed_hours != undefined){\r\n            setForm({...updatedForm, elapsed_hours: `${elapsed_hours.toFixed(1)}`})\r\n        }\r\n        else{\r\n            setForm({...updatedForm})\r\n        }\r\n        isValidFinishDateTime(elapsed_hours)                \r\n    }\r\n\r\n    const calculateElapsedHours = (obj=form) => {\r\n        // unless called by useEffect, this must be passed the most up to date version of form\r\n        let elapsed_time\r\n        if(obj.start_date && obj.finish_date){\r\n            let start = new Date(Date.parse(\r\n                `${obj.start_date}${obj.start_time && obj.finish_time ? ` ${obj.start_time}` : ''}`\r\n            ))\r\n            let finish = new Date(Date.parse(\r\n                `${obj.finish_date}${obj.start_time && obj.finish_time ? ` ${obj.finish_time}` : ''}`\r\n            ))\r\n            elapsed_time = (finish.getTime()-start.getTime())/(1000*60*60)\r\n        }\r\n        return elapsed_time\r\n    }\r\n\r\n    const updatePreSeasonForm = (newForm) => {\r\n        console.log('update Pre season.....',newForm)\r\n        setForm({...form, \r\n            preseason_storage_check_report: newForm\r\n        })\r\n    }\r\n\r\n    const updateRefrigerationStartUpForm = (newForm) => {\r\n        // console.log('update refrigeration start up.....',newForm)\r\n        setForm({...form, \r\n            refrigeration_start_up_report: newForm\r\n        })\r\n    }\r\n\r\n    const updateTechHoursInfo = (updatedTech) => {\r\n        let allTechs = form.all_techs.map(t => \r\n            t.id === updatedTech.id ? updatedTech : t\r\n        )\r\n        let updatedForm = {...form, all_techs: allTechs}\r\n        setForm({...updatedForm})\r\n    }\r\n\r\n    const calculateTotalHours = (newForm) => {\r\n        return newForm.all_techs.reduce(\r\n            (sum, t) => parseFloat(t.work_hours ? t.work_hours : 0) + sum, 0\r\n        ) + (newForm.travel_hours ? parseFloat(newForm.travel_hours) : 0)\r\n    } \r\n\r\n    const calculateTotalNoCharge = (newForm) => {\r\n        return newForm.all_techs.reduce(\r\n            (sum, t) => parseFloat(t.no_charge_hours ? t.no_charge_hours : 0) + sum, 0\r\n        ) + (parseFloat(newForm.travel_hours_no_charge) || 0)\r\n    }\r\n    \r\n    const [ techHourTotals, setTechHourTotals ] = React.useState({})\r\n    \r\n    // keep hours totals updated... must be after declaration of form\r\n    useEffect(()=>{\r\n        const hours = calculateTotalHours(form)\r\n        const noCharge = calculateTotalNoCharge(form)\r\n        setTechHourTotals({\r\n            'total_hours': hours,\r\n            'total_no_charge_hours':noCharge,\r\n            'total_billable_hours': (hours-noCharge).toFixed(1)\r\n        })\r\n    },[form.all_techs, form.travel_hours, form.travel_hours_no_charge])\r\n    \r\n    // Form Validations\r\n    useEffect(()=>{\r\n        setErrors({...errors, storage_input: validateStorage() })\r\n    },[form.storage_id, form.customer_id])\r\n\r\n    const validateStorage = () => {\r\n        // if storage is undefined\r\n        if(!form.storage_id){\r\n            // no error storage can be blank \r\n            return\r\n        }\r\n        // must return '' if 1st if storage is undefined. otherwise Browser ERROR\r\n        const storage = storages.filter(s => s.id === form.storage_id)[0]\r\n        const errorMessage = `Storage owner is ${customers.find(c => c.id === storage.owner_id).name}`\r\n        // if both are DEFINED\r\n        if(form.customer_id && form.storage_id){\r\n            // throw error if owner id of storage does not match customer id\r\n            if(storage.owner_id != form.customer_id){\r\n                return errorMessage\r\n            }\r\n            // delete errors.storage_input\r\n            return\r\n        }        \r\n        // if customer is undefined\r\n        if(!form.customer_id){\r\n            // throw error  \r\n            return errorMessage\r\n        }\r\n        return\r\n    }\r\n\r\n    useEffect(()=>{\r\n        isValidFinishDateTime(calculateElapsedHours())                \r\n    },[form.start_date, form.start_time, form.finish_date, form.finish_time])\r\n\r\n    const isValidFinishDateTime = (elapsed_hours) => {\r\n        // start date/time can't be greater than finished date/time\r\n        if(parseFloat(elapsed_hours) < 0){\r\n            setErrors({...errors, finish_date:\"Finish is before Start\"})\r\n        }\r\n        else{\r\n            let updatedErrors = errors\r\n            delete errors.finish_date\r\n            setErrors({...updatedErrors})\r\n        }\r\n    }\r\n\r\n    // Form Transformation Controlls according to its current status \r\n    const [approvalSectionIsHidden, setApprovalSectionIsHidden] = React.useState(true)\r\n    const [scheduleSectionIsHidden, setScheduleSectionIsHidden] = React.useState(true)\r\n    const [workPerformedSectionIsHidden, setWorkPerformedSectionIsHidden] = React.useState(true)\r\n\r\n    const setHiddenSections = () => {\r\n        setApprovalSectionIsHidden(parseInt(form.status) < 20)\r\n        setScheduleSectionIsHidden(parseInt(form.status) < 30)\r\n        setWorkPerformedSectionIsHidden(parseInt(form.status) < 40)\r\n\r\n    }\r\n    \r\n    const [requestAccordion, setRequestAccordion] = React.useState(false)\r\n    const [scheduleAccordion, setScheduleAccordion] = React.useState(false)\r\n    const [workPerformedAccordion, setWorkPerformedAccordion] = React.useState(false)\r\n\r\n    const setAccordionsExpanded = () => {\r\n        setRequestAccordion(parseInt(form.status) <= 30 || parseInt(form.status) > 40)\r\n        setScheduleAccordion(parseInt(form.status) >= 30)\r\n        setWorkPerformedAccordion(parseInt(form.status) >= 40)\r\n    }\r\n\r\n    // const [focusedField, setFocusedField] = useState('')\r\n\r\n    useEffect(()=>{\r\n        setAccordionsExpanded()\r\n        console.log('form status....')\r\n        setHiddenSections()\r\n    },[form.status])\r\n\r\n\r\n// -------------------------------Unsaved changes protection----------------------------------------------\r\n\r\n    // Save to Drafts on unload Event\r\n    const getIsOriginalForm = () => (JSON.stringify(orginalForm) === JSON.stringify(form))\r\n    const [isOrignalForm, setIsOriginalForm] = React.useState(getIsOriginalForm())\r\n        \r\n\r\n    useEffect(() => {\r\n        // Unsaved Changes Descision pop up\r\n        return () => {\r\n            console.log('unloading', getIsOriginalForm())\r\n            if(getIsOriginalForm() === false){\r\n                // alert(\"Unsaved changes have been saved in DRAFTS\")\r\n                let decision = window.confirm(\"Save changes as Draft?\")\r\n                console.log('unloading... SAVED in DRAFTS', decision)\r\n                if (decision){\r\n                    props.saveDraft(form)\r\n                }\r\n            }\r\n        }\r\n    },[isOrignalForm])\r\n    \r\n    // This is just for testing purposes to see when the form changes \r\n    const displayForm = () => console.log('form updated....',form)\r\n    \r\n    useEffect(()=>{\r\n        displayForm()\r\n\r\n        // this must be a one way switch, it can only change to FALSE, \r\n        // ...never back to TRUE or the unload event will fire at the wrong time, due to the above useEffect.\r\n        if(isOrignalForm === true){\r\n            console.log('getting isOriginalForm...', getIsOriginalForm())\r\n            setIsOriginalForm(()=>{\r\n                return getIsOriginalForm()\r\n            })        \r\n        }\r\n\r\n        console.log(\"original?...\", getIsOriginalForm())\r\n        if(!getIsOriginalForm()){\r\n            console.log('adding unloading listener to prevent nav away and losing unsaved data')\r\n            window.onbeforeunload = (e) => {\r\n                // Cancel the event\r\n                e.preventDefault(); // If you prevent default behavior in Mozilla Firefox prompt will always be shown\r\n                // Chrome requires returnValue to be set\r\n                e.returnValue = '';\r\n            } ;\r\n        }\r\n        else{\r\n            console.log('removing listener...')\r\n            window.onbeforeunload = undefined;\r\n        }\r\n        // on umount, overwrite the listener or it will fire in other parts of the app\r\n        return () => {\r\n            window.onbeforeunload = undefined\r\n        }\r\n    },[form])\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n        <Container className={classes.container}>\r\n            <Paper className={classes.paper}>\r\n                {/* HEADER with Storage and  Service Type */}\r\n        \r\n\r\n\r\n        {/* REQUEST section */}\r\n                <AccordionSection \r\n                    sum1={`\r\n                            ${form.customer_id ? customers.find(c => c.id === form.customer_id).name : '?'} \r\n                            - \r\n                            ${form.storage_id ? storages.find(c => c.id === form.storage_id).name : '?'}\r\n                        `}\r\n                    sum2={dataLegend.status.find(s => s.value === form.status).name || '?'}\r\n\r\n                    expanded={requestAccordion}\r\n                    onChange={() => setRequestAccordion(!requestAccordion)}\r\n                >\r\n                    {/* Customer and Storage */}\r\n                    <Grid item xs={12} sm={4} md={4}>\r\n                        <Grid container spacing={1} direction={'column'} alignItems='stretch'>\r\n                            {/* <SelectInputCustom title='Customer' label='customer' >\r\n                                {customers.map((customer)=> (\r\n                                    <MenuItem key={customer.id} value={customer.id} >\r\n                                        {customer.name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </SelectInputCustom> */}\r\n                            <Autocomplete \r\n                                value={customers.filter(c => c.id === form.customer_id)[0] || '' }\r\n                                \r\n                                variant='outlined'\r\n                                autoComplete\r\n\r\n                                options={customers.sort((c, b) => (c.name > b.name) ? 1:-1)} //sort in chrome requires returning 1 or -1 to determine order\r\n                                getOptionLabel={(option)=> ((option.name || '') || '')} \r\n                                getOptionSelected={option => option.id === form.customer_id }\r\n                                \r\n                                onChange={(e, value) =>\r\n                                    setForm({...form, \r\n                                        'customer_id':(value ? value.id : '')\r\n                                    })\r\n                                }\r\n                                renderInput={(params) => \r\n                                    <TextField {...params} \r\n                                        label=\"Customer\" \r\n                                        margin=\"normal\" \r\n                                        variant='outlined'\r\n                                        margin='dense'\r\n                                        error={form.customer_id ? false : true}\r\n                                    />\r\n                                }\r\n                                \r\n                            />\r\n                            {/* <SelectInputCustom title='Storage' label='storage' >\r\n                                {storages.map((storage)=>(\r\n                                    <MenuItem key={storage.id} value={storage.id}>\r\n                                        {storage.name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </SelectInputCustom> */}\r\n                            <Autocomplete \r\n                                value={storages.filter(s => s.id === form.storage_id)[0] || '' }\r\n\r\n                                variant='outlined'\r\n                                autoComplete\r\n\r\n                                options={form.customer_id ? \r\n                                    storages.filter(s => s.owner_id === form.customer_id) :\r\n                                    storages\r\n                                }\r\n                                groupBy={option => option.owner_id}\r\n                                renderGroup={(params) => \r\n                                    [\r\n                                    <Divider />,\r\n                                    <ListSubheader  key={params.key} component=\"div\" disableSticky={true}>\r\n                                      {customers.filter(c => c.id === params.group)[0].name}\r\n                                    </ListSubheader >,\r\n                                    params.children,\r\n                                    ] \r\n                                }\r\n\r\n                                getOptionLabel={(option)=>(option.name || '')}\r\n                                getOptionSelected={option => option.id === form.storage_id }\r\n                                \r\n                                onChange={(e, value)=>{\r\n                                    setForm({...form, \r\n                                        'storage_id':(value ? value.id : ''),\r\n                                        'customer_id':(value ? value.owner_id : form.customer_id)\r\n                                    })\r\n                                }}\r\n                                \r\n                                renderInput={(params) => \r\n                                    <TextField {...params} \r\n                                        label=\"Storage\" \r\n                                        margin=\"normal\" \r\n                                        variant='outlined'\r\n                                        margin='dense'\r\n                                        // error when customer_id doesn't match storage owner_id\r\n                                        error={errors.storage_input || form.storage_id === '' ? true : false}\r\n                                        helperText={errors.storage_input}\r\n                                        // error={form.storage_id ? false : true}\r\n                                    \r\n                                    />\r\n                                    \r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    \r\n                    {/* Requester and Urgency */}\r\n                    <Grid item xs={12} sm={4} md={4}>\r\n                        <Grid container spacing={1} direction={'column'}>\r\n                            <SelectInputCustom \r\n                                title='Urgency' \r\n                                label='urgency' \r\n                                defaultValue='normal' \r\n                                value={form.urgency}\r\n                                onChange={e => updateForm('urgency',e)}\r\n                            >\r\n                                {\r\n                                    dataLegend.urgency.map(choice => \r\n                                        <MenuItem key={choice.value} value={choice.value}>{choice.name}</MenuItem>\r\n                                )}\r\n                            </SelectInputCustom>\r\n                            <TextField \r\n                                value={form.requested_by}\r\n                                onChange={e => updateForm('requested_by', e)}\r\n                                variant='outlined' \r\n                                margin='dense' \r\n                                label='Requested By' \r\n                                error={form.requested_by === '' ? true : false}\r\n                            />\r\n                            \r\n                        </Grid> \r\n\r\n                    </Grid>\r\n\r\n                    {/* Status & Type */}\r\n                    <Grid item xs={12} sm={4} md={4}>\r\n                        <Grid container spacing={1} direction={'column'}>\r\n                            <SelectInputCustom title='Status' label='status' \r\n                                value={form.status}\r\n                                onChange={e => updateForm('status', e)}\r\n                            >\r\n                                {\r\n                                    dataLegend.status.map((choice) => \r\n                                        <MenuItem key={choice.value} value={choice.value}>{choice.name}</MenuItem>\r\n                                    )\r\n                                }\r\n                            </SelectInputCustom>\r\n\r\n                            <TextField \r\n                                variant='outlined' \r\n                                label='P.O. #' \r\n                                margin='dense'\r\n                                value={form.purchase_order_no}\r\n                                onChange={e => updateForm('purchase_order_no', e)}\r\n                            />\r\n{/* \r\n                            <Autocomplete \r\n                                autoSelect\r\n                                value={form.type_of_work}\r\n                                onChange={(e, value) => setForm({...form, type_of_work:(value || '')})}\r\n                                options={[\r\n                                        \"Climate Automation\",\r\n                                        \"Ventalation\",\r\n                                        \"Humidification\",\r\n                                        \"Refrigeration\", \r\n                                        \"VFD / Pump\",\r\n                                        \"Electrical\",\r\n                                        \"Pre-Season Storage check\",\r\n                                        \"Refrigeration Start Up\",\r\n                                        \r\n                                        \r\n                                    ].map(option => option)\r\n                                }\r\n                                renderInput={(params) => \r\n                                    <TextField \r\n                                        {...params}\r\n                                        label='Type of Work'\r\n                                        margin='dense'\r\n                                        variant='outlined'\r\n                                        error={form.type_of_work === '' ? true : false}\r\n                                    />\r\n                                }\r\n                            /> */}\r\n                            \r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                        <Divider  style={{width: '100%', marginTop:'8px', marginBottom:'8px'}} />\r\n\r\n                        <Grid container spacing={0}>\r\n\r\n                            <Grid item xs={12} sm={12} md={12}>\r\n                                <TextField \r\n                                    label='Request Notes'\r\n                                    placeholder='What is the issue? (not visible to customer)'\r\n                                    multiline\r\n                                    variant='outlined'\r\n                                    margin='dense'\r\n                                    fullWidth\r\n                                    rows={2}\r\n                                    rowsMax='4'\r\n                                    value={form.request_notes}\r\n                                    onChange={e => updateForm('request_notes', e)}\r\n                                    error={form.request_notes ? false : true}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={12} md={12}>\r\n                            {/* https://medium.com/trabe/controlled-file-input-components-in-react-3f0d42f901b8 */}\r\n                            {/* https://codeburst.io/react-image-upload-with-kittens-cc96430eaece */}\r\n                                <Button color='primary' style={{margin:'5px'}}\r\n                                    disabled\r\n                                    onClick={()=>document.getElementById(\"addPhotos\").click()}\r\n                                >   \r\n                                    <AddAPhoto/>\r\n                                        <input id='addPhotos' \r\n                                            type='file' \r\n                                            accept='image/*' \r\n                                            multiple \r\n                                            hidden\r\n                                            files={form.request_photos}\r\n                                            onChange={(e)=>updateRequestPhotos(e)}\r\n                                        />\r\n                                        <div style={{marginLeft: '15px'}}> Add Photos</div>\r\n                                </Button>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                                            \r\n                    </Grid>\r\n\r\n                    {/* <Grid \r\n                        item \r\n                        hidden={approvalSectionIsHidden}\r\n                        xs={12} sm={12} md={12} lg={12}\r\n                    >\r\n                        <Divider  style={{width: '100%', marginTop:'8px', marginBottom:'8px'}} />\r\n                        <Grid container \r\n                            spacing={1}\r\n                        >\r\n                            <Grid item xs={12} sm={4} md={4}>\r\n                                    <TextField \r\n                                        variant='outlined' \r\n                                        label='Approved By' \r\n                                        margin='dense'\r\n                                        value={form.approved_by}\r\n                                        onChange={e => updateForm('approved_by', e)}\r\n                                        fullWidth\r\n                                        />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={4} md={4}> \r\n\r\n                            </Grid>\r\n                            <Grid item sm={4} md={4}></Grid>\r\n                        </Grid>\r\n                    </Grid> */}\r\n\r\n                </AccordionSection>\r\n\r\n        {/* APPROVAL */}\r\n                {/* <AccordionSection\r\n                    // sum1={'Approval Details'}\r\n                    sum1={`Approved By: ${form.approved_by || '--'}`}\r\n                    sum2={`PO#: ${form.purchase_order_no || '--'}`}\r\n                    >\r\n\r\n                </AccordionSection> */}\r\n\r\n            {/* SCHEDULe */}\r\n                <AccordionSection \r\n                    sum1={form.scheduled_date ? \r\n                            new Date(\r\n                                parseInt(form.scheduled_date.slice(0,4)),\r\n                                parseInt(form.scheduled_date.slice(5,7)-1),\r\n                                parseInt(form.scheduled_date.slice(8,10))\r\n                            ).toDateString() \r\n                            : 'Not Scheduled'\r\n                        }\r\n                    sum2={form.lead_tech ? `${getTechShortName(form.lead_tech)}` : 'Unassigned'}\r\n\r\n                    hidden={scheduleSectionIsHidden}\r\n                    expanded={scheduleAccordion}\r\n                    onChange={()=>setScheduleAccordion(!scheduleAccordion)}\r\n                >\r\n                    {/* Date Time */}\r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                        <Grid container spacing={1} direction={'row'}>\r\n                            <Grid item xs={12} sm={4} md={3}  >\r\n                                <SelectInputCustom title='Sheet Type' label='sheet_type' \r\n                                    value={form.sheet_type}\r\n                                    onChange={e => updateForm('sheet_type', e)}\r\n                                    error={ form.sheet_type === ''? true : false }\r\n                                    // helperText={form.sheet_type === '' ? 'Sheet Type is required' : undefined}\r\n                                >\r\n                                    {\r\n                                        AppDataLegend().service_sheet.sheet_type.map(t => \r\n                                            <MenuItem value={t.value}>{t.name}</MenuItem>                                            \r\n                                        )\r\n                                    }\r\n                                </SelectInputCustom>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={5} md={3}  >\r\n                                <TextField style={{maxWidth:'50%', width:'50%'}}\r\n                                    id=\"date\"\r\n                                    label=\"Scheduled Date\"\r\n                                    variant={'outlined'}\r\n                                    margin={'dense'}\r\n                                    type=\"date\"\r\n                                    format=\"MM/dd/yyyy\"\r\n                                    value={form.scheduled_date}\r\n                                    onChange={e => updateForm('scheduled_date',e)}\r\n                                    // fullWidth\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                />\r\n                                <TextField style={{maxWidth:'50%', width:'50%'}}\r\n                                    id=\"time\"\r\n                                    label=\"Time\"\r\n                                    variant={'outlined'}\r\n                                    margin={'dense'}\r\n                                    type=\"time\"\r\n                                    value={form.scheduled_time}\r\n                                    onChange={e => updateForm('scheduled_time',e)}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                />  \r\n                                {/* <Event style={{marginTop:'15px', marginLeft: '10px' }}/> */}\r\n\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={3} md={3} >\r\n                                <SelectInputCustom \r\n                                    title='Billing Type'\r\n                                    label='billing_type'\r\n                                    value={form.billing_type}\r\n                                    onChange={(e) => updateForm('billing_type', e)}\r\n                                >\r\n                                    {\r\n                                        AppDataLegend().service_sheet.billing_type.map(t => \r\n                                            <MenuItem value={t.value}>{t.name}</MenuItem>                                            \r\n                                        )\r\n                                    }\r\n                                </SelectInputCustom>\r\n                            </Grid>\r\n                            \r\n                        </Grid>\r\n                    {/* </Grid> */}\r\n                    \r\n                    {/* <Grid item xs={12} sm={12} md={12} > */}\r\n                        <Grid container spacing={1} >\r\n                            {/* Lead Tech */}\r\n                            <Grid item xs={12} sm={4} md={4} >\r\n                                <SelectInputCustom \r\n                                    title='Lead Tech' \r\n                                    label='lead_tech'\r\n                                    value={form.lead_tech} \r\n                                    onChange={(e) => updateForm('lead_tech', e)}\r\n                                >\r\n                                    {serviceTechs.map((tech) => (\r\n                                        <MenuItem key={tech.id} value={tech.id}>\r\n                                            {tech.firstName}  {tech.lastName}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </SelectInputCustom>\r\n                            </Grid>\r\n                            {/* All Techs */}\r\n                            <Grid item xs={12} sm={8} md={8} >\r\n                                <FormControl  variant=\"outlined\" fullWidth className={classes.selectFormControl}>\r\n                                    <InputLabel id=\"all_techs-label\" className={classes.selectInputLabel} >All Techs</InputLabel>\r\n                                    <Select multiple\r\n                                    id=\"all_techs\"\r\n                                    label='all_techs'\r\n                                    labelId=\"all_techs-label\"\r\n                                    variant='outlined'\r\n                                    \r\n                                    margin='dense'\r\n                                    value={form.all_techs.map(t => t.id)}\r\n                                    renderValue={(selected) => selected.map(t => getTechShortName(t)).join(', ')}\r\n                                    onChange={updateAllTechsList}\r\n                                    MenuProps={{\r\n                                        getContentAnchorEl: () => null,\r\n                                        PaperProps: {\r\n                                            style: {\r\n                                                maxHeight: 48 * 4.2 + 8,\r\n                                                width: 250,\r\n                                            },\r\n                                        },\r\n                                    }}\r\n                                    >\r\n                                    {serviceTechs.map((tech) => (\r\n                                        <MenuItem key={tech.id} value={tech.id}>\r\n                                            <Checkbox checked={form.all_techs.map(t => t.id).indexOf(tech.id) > -1} />\r\n                                            <ListItemText primary={`${tech.firstName} ${tech.lastName}`} />\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n                    {/* </Grid> */}\r\n                    {/* Prep Notes */}\r\n                    {/* <Grid item xs={12} sm={12} md={12} > */}\r\n                        <TextField\r\n                            id=\"outlined-textarea\"\r\n                            label=\"Prep Notes\"\r\n                            placeholder=\"Job advice, Tools, Parts, etc... (Staff Only)\"\r\n                            multiline\r\n                            rows={2}\r\n                            rowsMax={10}\r\n                            fullWidth\r\n                            margin={'dense'}\r\n                            variant=\"outlined\"\r\n                            value={form.preparation_notes}\r\n                            onChange={e => updateForm('preparation_notes',e)}\r\n                        />\r\n\r\n                    </Grid>\r\n                    \r\n                </AccordionSection>\r\n\r\n\r\n                <AccordionSection \r\n                    sum1={'Work Performed'}\r\n\r\n                    hidden={workPerformedSectionIsHidden}\r\n                    expanded={workPerformedAccordion}\r\n                    onChange={()=>setWorkPerformedAccordion(!workPerformedAccordion)}\r\n                >   \r\n\r\n                    <Grid item xs={12} sm={6} md={5}>\r\n                        <Grid container spacing={0} direction={'row'}>\r\n                            <Grid item xs={7} sm={7} md={6}  >\r\n                                <TextField\r\n                                    id=\"date\"\r\n                                    label=\"STARTED\"\r\n                                    variant={'outlined'}\r\n                                    margin={'dense'}\r\n                                    type=\"date\"\r\n                                    value={form.start_date || ''}\r\n                                    onChange={(e) => handleStartedFinishedFields('start_date', e)}\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={5} sm={5} md={5}   >\r\n                                <TextField\r\n                                    id=\"time\"\r\n                                    label=\"Time\"\r\n                                    variant={'outlined'}\r\n                                    margin={'dense'}\r\n                                    type=\"time\"\r\n                                    value={form.start_time || ''}\r\n                                    onChange={(e) => handleStartedFinishedFields('start_time', e)}\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                />  \r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    {/* <Divider dark style={{width: '100%'}} /> */}\r\n\r\n                    <Grid item xs={12} sm={6} md={5}>\r\n                        <Grid container spacing={0} direction={'row'}>\r\n                            <Grid item xs={7} sm={7} md={6} >\r\n                                <TextField\r\n                                    id=\"date\"\r\n                                    label=\"FINISHED\"\r\n                                    variant={'outlined'}\r\n                                    margin={'dense'}\r\n                                    type=\"date\"\r\n                                    value={form.finish_date || ''}\r\n                                    onChange={(e) => handleStartedFinishedFields('finish_date', e)}\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    error={errors.finish_date ? true : false}\r\n                                    helperText={errors.finish_date || ''}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={5} sm={5} md={5}   >\r\n                                <TextField\r\n                                    id=\"time\"\r\n                                    label=\"Time\"\r\n                                    variant={'outlined'}\r\n                                    margin={'dense'}\r\n                                    type=\"time\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    value={form.finish_time || ''}\r\n                                    onChange={(e) => handleStartedFinishedFields('finish_time', e)}\r\n                                    error={errors.finish_date ? true : false}\r\n                                    // helperText={errors.finish_time || ''}\r\n                                />  \r\n                                {/* <Event style={{marginTop:'15px', marginLeft: '10px' }}/> */}\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={6} sm={3} md={2}>\r\n                        <TextField \r\n                            label={'Travel Time'} \r\n                            variant='outlined'\r\n                            type='number' \r\n                            margin='dense'\r\n                            placeholder='Hours'\r\n                            fullWidth\r\n                            value={form.travel_hours}\r\n                            onChange={(e)=>setForm({...form, travel_hours: e.target.value})}\r\n                            inputProps={{\r\n                                min:'0',\r\n                                max:'100',\r\n                                step:'.1',\r\n                            }}\r\n                            />\r\n                    </Grid>\r\n\r\n            {/* Additional forms go here!!!!! */}\r\n                    \r\n                            {/* PRE - SEASON FORM */}\r\n                    {\r\n                        form.sheet_type === 'pre-season_storage_check' ? \r\n                        <Grid item xs={12} sm={12} md={12} >\r\n                            <PreSeasonForm \r\n                                preSeasonFormData={form['preseason_storage_check_report']}\r\n                                updatePreSeasonForm={updatePreSeasonForm}\r\n                                />\r\n                        </Grid>\r\n                        : ''\r\n                    }\r\n\r\n                            {/* REFRIGERATION START UP FORM */}\r\n                    {\r\n                        form.sheet_type === 'refrigeratoin_start-up' ? \r\n                        <Grid item xs={12} sm={12} md={12} >\r\n                            <RefrigerationStartUpForm \r\n                                refrigerationStartUpFormData={form['refrigeration_start_up_report']}\r\n                                updateRefrigerationStartUpForm={updateRefrigerationStartUpForm}\r\n                                />\r\n                        </Grid>\r\n                        : '' \r\n                    }\r\n\r\n            {/* ------------------------------------- */}\r\n\r\n                    <Grid item xs={12} sm={9} md={10} >\r\n                        <FormControl component=\"div\" margin='dense' className={classes.inlineRadio}\r\n                            fullWidth\r\n                        >\r\n                            <FormLabel \r\n                                style={{maxWidth:'45%'}}\r\n                                component=\"div\" \r\n                                color='primary' \r\n                                className={classes.radioLabel}\r\n                                error={form.follow_up_required === 'true' ? true : false}\r\n                            >\r\n                                Follow Up Required?\r\n                            </FormLabel>\r\n                            <RadioGroup\r\n                                name=\"follow_up\" \r\n                                row\r\n                                value={form.follow_up_required}\r\n                                onChange={e => updateForm('follow_up_required', e)}\r\n                                \r\n                            >\r\n                                <FormControlLabel value={'true'} control={<Radio size='small' />} label=\"Yes\" />\r\n                                <FormControlLabel value={'false'} control={<Radio size='small' color='primary'/>} label=\"No\" />\r\n                            </RadioGroup>\r\n                            \r\n                        </FormControl>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} sm={12} md={12} >\r\n                        <TextField\r\n                            id=\"outlined-textarea\"\r\n                            label=\"Work Performed\"\r\n                            placeholder=\"Viewable by Customer...\"\r\n                            multiline\r\n                            rows={2}\r\n                            rowsMax={7}\r\n                            fullWidth\r\n                            value={form.work_performed} \r\n                            onChange={e => updateForm('work_performed', e)}                           \r\n                            margin={'dense'}\r\n                            variant=\"outlined\"\r\n                        />\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={12} md={12} >\r\n                        <Paper className={classes.paperTable}>\r\n                            <TableForParts rows={form.parts} >\r\n\r\n                            </TableForParts>\r\n                            <FormButton onClick={openDialogAddPart} >\r\n                                PART\r\n                                <Add fontSize='small'/>\r\n                            </FormButton>\r\n\r\n                            {/* ADD PARTS FORM */}\r\n                            <DialogFormAddPart \r\n                                addPart={addPart} \r\n                                open={dialogAddPart}\r\n                                onClose={closeDialogAddPart}\r\n                            />\r\n\r\n                        </Paper>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={12} md={12} >\r\n                        <Paper className={classes.paperTable}>\r\n                            <TableForTechHours \r\n                                elapsed_hours={form.elapsed_hours} \r\n                                rows={form.all_techs} \r\n                                getTechFullName={getTechFullName}\r\n                                updateTechHoursInfo={updateTechHoursInfo} \r\n                                removeTech={removeTech}\r\n                                form={form}\r\n                                setForm={setForm}\r\n                                totals={techHourTotals}\r\n                            />\r\n\r\n                        </Paper>\r\n\r\n                    </Grid>\r\n\r\n\r\n                </AccordionSection>\r\n            \r\n            </Paper>\r\n        </Container>\r\n        \r\n            <FormActionBar >\r\n                <FormActionButtons \r\n                    form={form}\r\n                    submit={props.submitNew}\r\n                    update={props.update}\r\n                />\r\n            </FormActionBar>\r\n\r\n        </>\r\n    )\r\n}\r\nexport default CreateServiceSheet;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\AppTitle.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\AppSideMenu.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\ButtonCreateSheet.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\DialogFormAddPart.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\TableForParts.js",["306"],"import React from 'react'\r\nimport DialogFormAddPart from './DialogFormAddPart'\r\nimport { Table,\r\n        TableBody,\r\n        TableCell,\r\n        TableContainer,\r\n        TableRow,\r\n        TableHead,\r\n        makeStyles,\r\n        withStyles,\r\n        } from '@material-ui/core';\r\n\r\nconst TableCellCustom = withStyles((theme)=> ({\r\n    root:{\r\n        padding:'5px 10px',\r\n        alignItems: 'center'\r\n    }\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper:{\r\n        background: 'lightgrey'\r\n    }, \r\n    header:{\r\n        paddingTop: '30px',\r\n        '& .MuiTableCell-root':{\r\n            border: 'none'\r\n        }\r\n    }\r\n}))\r\n\r\nconst TableForParts = (props) => {\r\n    const classes = useStyles()\r\n\r\n    const [ selectedPart, setSelectedPart ] = React.useState('')\r\n    const [ openDialog, setOpenDialog] = React.useState(false)\r\n\r\n    const handleSelect = (index) => {\r\n        setOpenDialog(true)\r\n        setSelectedPart(index)\r\n    }\r\n    // test notes...\r\n\r\n    return(\r\n        <>\r\n        <DialogFormAddPart \r\n            open={openDialog}\r\n            onClose={()=>setOpenDialog(false)}\r\n            selectedPart={props.rows[selectedPart]}\r\n        \r\n        />\r\n        <TableContainer >\r\n            <Table size='small'>\r\n                <TableHead >\r\n                    <TableRow className={classes.header}><TableCell></TableCell></TableRow>\r\n                    <TableRow >\r\n                        <TableCell colSpan={1} align=\"center\" width={'15%'} >\r\n                            Part&nbsp;#\r\n                        </TableCell>\r\n                        <TableCell colSpan={1} align=\"center\" width={'30%'}>\r\n                            Description\r\n                        </TableCell>\r\n                        <TableCell colSpan={1} align=\"center\" width={'15%'}>\r\n                            Unit\r\n                        </TableCell>\r\n                        <TableCell colSpan={1} align=\"center\" width={'10%'}>\r\n                            QTY\r\n                        </TableCell>\r\n                        <TableCell colSpan={1} align=\"center\" width={'15%'}>\r\n                            Unit Cost\r\n                        </TableCell>\r\n                        <TableCell colSpan={1} align=\"center\" width={'15%'}>\r\n                            Total\r\n                        </TableCell>\r\n                        \r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody >\r\n                    { props.rows.length === 0 ? \r\n\r\n                        <TableRow>\r\n                            <TableCell colSpan={7} align='center' color='primary'>\r\n                                There are no parts\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    \r\n                    :\r\n                    props.rows.map((row, index) => (\r\n                        <TableRow \r\n                        key={row.part_number} \r\n                        hover \r\n                        onClick={()=>{handleSelect(index)}}\r\n                        >\r\n                                <TableCellCustom>\r\n                                    {row.part_number}\r\n                                </TableCellCustom>\r\n                                <TableCellCustom>\r\n                                    {row.description}\r\n                                </TableCellCustom>\r\n                                <TableCellCustom align='center'>\r\n                                    {row.unit}\r\n                                </TableCellCustom>\r\n                                <TableCellCustom align='center'>\r\n                                    {row.quantity}\r\n                                </TableCellCustom>\r\n                                <TableCellCustom align='right'>\r\n                                    {row.unit_cost != '' ?\r\n                                        parseFloat(row.unit_cost).toLocaleString('en-US', {\r\n                                            style: 'currency',\r\n                                            currency: 'USD',\r\n                                        })\r\n                                        : '-'\r\n                                    }\r\n                                </TableCellCustom>\r\n                                <TableCellCustom>\r\n                                    {/* ${row.unit_cost} */}\r\n                                </TableCellCustom>\r\n                            </TableRow>\r\n                        ))\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n\r\n        </TableContainer>\r\n        </>\r\n    )\r\n}\r\nexport default TableForParts;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\TableForTechHours.js",["307","308","309","310","311"],"import React, { useEffect, useState } from 'react'\r\nimport DialogFormEditHours from './DialogFormEditHours'\r\nimport { Table,\r\n        TableBody,\r\n        TableCell,\r\n        TableContainer,\r\n        TableRow,\r\n        TableHead,\r\n        makeStyles,\r\n        withStyles,\r\n        TextField,\r\n        Typography,\r\n        InputAdornment,\r\n        Box\r\n        } from '@material-ui/core';\r\nimport { formatDiagnostic } from 'typescript';\r\n\r\nconst TableCellCustom = withStyles((theme)=> ({\r\n    root:{\r\n        padding:'5px 10px',\r\n        alignItems: 'center'\r\n    }\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper:{\r\n        background: 'lightgrey'\r\n    }, \r\n    header:{\r\n        paddingTop: '30px',\r\n        '& .MuiTableCell-root':{\r\n            border: 'none'\r\n        }\r\n    },\r\n    input:{\r\n        '& .MuiInputBase-input':{\r\n            textAlign: 'center'\r\n        }\r\n    }\r\n}))\r\n\r\nconst TableForTechHours = (props) => {\r\n    const classes = useStyles()\r\n\r\n    const [ selectedRow, setSelectedRow ] = React.useState('')\r\n    const [ openDialog, setOpenDialog] = React.useState(false)\r\n\r\n    const handleSelect = (index) => {\r\n        setOpenDialog(true)\r\n        setSelectedRow(index)\r\n    }\r\n\r\n    return(\r\n        <>\r\n        {/* For viewing updating Tech hours from table */}\r\n        <DialogFormEditHours \r\n            open={openDialog}\r\n            onClose={setOpenDialog}\r\n            selectedRow={props.rows[selectedRow]}\r\n\r\n            getTechFullName={props.getTechFullName}\r\n            submitChange={props.updateTechHoursInfo} \r\n            removeRow={props.removeTech}\r\n            elapsedTime={props.form.elapsed_hours}\r\n        />\r\n        <TableContainer >\r\n            <Table size='small'>\r\n                <TableHead >\r\n                    <TableRow className={classes.header}><TableCell></TableCell></TableRow>\r\n                    <TableRow >\r\n                        <TableCell colSpan={1} align=\"center\" width={'25%'} >\r\n                            Service&nbsp;Tech\r\n                        </TableCell>\r\n                        <TableCell colSpan={1} align=\"center\">\r\n                            Work&nbsp;Hrs\r\n                        </TableCell>\r\n                        <TableCell colSpan={1} align=\"center\">\r\n                            N/C\r\n                        </TableCell>\r\n                        <TableCell colSpan={1} align=\"left\" width={'45%'}>\r\n                            Notes\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody >\r\n                    { props.rows.length === 0 ? \r\n                        <TableRow>\r\n                            <TableCell colSpan={7} align='center' color='primary'>\r\n                                <Typography> No Service Techs Assigned </Typography>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    \r\n                    :\r\n                    props.rows.map((row, index) => (\r\n                        <TableRow \r\n                        key={row.id} \r\n                        hover \r\n                        onClick={()=>{handleSelect(index)}}\r\n                        >\r\n                                <TableCellCustom>\r\n                                    {props.getTechFullName(row.id)}\r\n                                </TableCellCustom>\r\n                                <TableCellCustom align='center'>\r\n                                    {row.work_hours || '-'}\r\n                                </TableCellCustom>\r\n                                {/* <TableCellCustom align='center'>\r\n                                    {row.travel_hours}\r\n                                </TableCellCustom> */}\r\n                                <TableCellCustom align='center'>\r\n                                    {row.no_charge_hours || '-'}\r\n                                </TableCellCustom>\r\n                                <TableCellCustom>\r\n                                    {row.notes}\r\n                                </TableCellCustom>\r\n                            </TableRow>\r\n                        ))\r\n                    }\r\n\r\n                    { props.rows.length === 0 ? '' : \r\n                    <>\r\n                        <TableRow >\r\n                            <TableCell align='right'>\r\n                                <Typography size='large'>\r\n                                    Travel\r\n                                </Typography>\r\n                            </TableCell>\r\n                            <TableCell >\r\n                                <TextField \r\n                                    className={classes.input}\r\n                                    value={props.form.travel_hours}\r\n                                    onChange={(e)=>\r\n                                        props.setForm({...props.form, travel_hours:e.target.value}\r\n                                    )}\r\n                                    type='number'\r\n                                    inputProps={{\r\n                                        min:'0',\r\n                                        max:'100',\r\n                                        step:'.1'\r\n                                    }}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell >\r\n                                <TextField \r\n                                    className={classes.input}\r\n                                    value={props.form.travel_hours_no_charge }\r\n                                    // onChange={(e)=>props.updateTravelHours('travel_hours_no_charge',e)}\r\n                                    onChange={(e)=>\r\n                                        props.setForm({...props.form, travel_hours_no_charge: e.target.value}\r\n                                    ) }\r\n                                    type='number'\r\n                                    inputProps={{\r\n                                        min:'0',\r\n                                        max:'100',\r\n                                        step:'.1',\r\n                                    }}\r\n                                    />\r\n                            </TableCell>\r\n                            <TableCell />\r\n                        </TableRow>\r\n                        <TableRow >\r\n                            <TableCell align='right'>\r\n                                <Typography size='large'>\r\n                                    Total\r\n                                </Typography>\r\n                            </TableCell>\r\n                            <TableCell >\r\n                                <TextField \r\n                                    className={classes.input}\r\n                                    contentEditable={false}\r\n                                    value={props.totals.total_hours || '0'}\r\n                                    // value={calculateTotalHours() ? calculateTotalHours().toFixed(1) : '0'}\r\n                                    />\r\n                            </TableCell>\r\n                            <TableCell >\r\n                                <TextField \r\n                                    className={classes.input}\r\n                                    contentEditable={false}\r\n                                    // value={parseFloat(props.form.total_no_charge_hours) : '0'}\r\n                                    value={props.totals.total_no_charge_hours || '0'}\r\n                                    />\r\n                            </TableCell>\r\n                            <TableCell >\r\n                                <TextField \r\n                                    // className={classes.input}\r\n                                    contentEditable={false}\r\n                                    style={{width: '50px'}}\r\n                                    value={props.totals.total_billable_hours || '   0'}\r\n                                    />\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </>\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n\r\n        </TableContainer>\r\n        </>\r\n    )\r\n}\r\nexport default TableForTechHours;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\PreSeasonForm.js",["312","313","314","315","316","317","318","319"],"import React, { useState, useEffect } from 'react'\r\nimport makeStyles from '@material-ui/core/styles/makeStyles'\r\n// import FormLabel from '@material-ui/core/FormLabel';\r\nimport Accordion from '@material-ui/core/Accordion'\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\n// import FormHelperText from '@material-ui/core/FormHelperText';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { Divider, Typography } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport { keys } from '@material-ui/core/styles/createBreakpoints'\r\nimport { Add, Backspace, BackspaceOutlined, DoneAll, PlaylistAddCheck, DeleteForever } from '@material-ui/icons'\r\nimport FormButton from '../globalComponents/FormButton'\r\nimport SingleInputAndButton from '../globalComponents/SingleInputUncontrolledAndButton'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    checkbox:{\r\n        \r\n    },\r\n    formSuccess:{\r\n        // backgroundColor: theme.palette.success.light\r\n        backgroundColor: theme.palette.successHighlight.main,\r\n        '& .Mui-focused':{\r\n            backgroundColor: theme.palette.successHighlight.main\r\n        }\r\n    },\r\n    formIncomplete:{\r\n        // backgroundColor: theme.palette.error.light\r\n        backgroundColor: theme.palette.errorHighlight.main,\r\n        '& .Mui-focused':{\r\n            backgroundColor: theme.palette.errorHighlight.main\r\n        }\r\n    }\r\n}))\r\n\r\nconst CustCheckbox = (props) => {\r\n    return(\r\n        <Checkbox \r\n            {...props}\r\n            color='primary'\r\n        />\r\n)}\r\n\r\nconst PreSeasonForm = (props) => {\r\n    const classes = useStyles()\r\n\r\n    const [formComplete, setFormComplete] = useState(false) \r\n\r\n    const [tasksCompleted, setTasksCompleted] = useState(0)\r\n    const [tasksTotal, setTasksTotal] = useState(23)\r\n\r\n    const preSeasonIsCompleted = () => {\r\n        let count = 0\r\n        for(const field in props.preSeasonFormData){\r\n            if(props.preSeasonFormData[field] === true){ count++ }\r\n        }\r\n\r\n        if(count >= tasksTotal){\r\n            setFormComplete(true)\r\n        }\r\n        else{\r\n            setFormComplete(false)\r\n        }\r\n        setTasksCompleted(count)\r\n    }\r\n    \r\n    \r\n    const onCheckedHandler = (field, e) => {\r\n        console.log(field, e.target.checked)\r\n        props.updatePreSeasonForm({...props.preSeasonFormData, [field]:e.target.checked})\r\n    }\r\n\r\n    const addFanMotorAmps = (amps) => {\r\n        if(isNaN(amps) || amps === ''){\r\n            return\r\n        }\r\n\r\n        const amps_list = props.preSeasonFormData.fans_motors_amps || []\r\n\r\n        props.updatePreSeasonForm({...props.preSeasonFormData, \r\n            fans_motors_amps:[...amps_list, amps]\r\n        })\r\n    }\r\n\r\n    const popLastFanMotorAmps = () => {\r\n        let amps_list = props.preSeasonFormData.fans_motors_amps || []\r\n        amps_list.pop()\r\n        props.updatePreSeasonForm({...props.preSeasonFormData, \r\n            fans_motors_amps:amps_list\r\n        })\r\n    }\r\n\r\n    const addClimcellPumpMotorAmps = (amps) => {\r\n        if(isNaN(amps) || amps === ''){\r\n            return\r\n        }\r\n\r\n        const amps_list = props.preSeasonFormData.climacell_pump_motors_amps || []\r\n\r\n        props.updatePreSeasonForm({...props.preSeasonFormData, \r\n            climacell_pump_motors_amps:[...amps_list, amps]\r\n        })\r\n    }\r\n\r\n    const popLastClimcellPumpMotorAmps = () => {\r\n        let amps_list = props.preSeasonFormData.climacell_pump_motors_amps || []\r\n        amps_list.pop()\r\n        props.updatePreSeasonForm({...props.preSeasonFormData, \r\n            climacell_pump_motors_amps:amps_list\r\n        })\r\n    }\r\n\r\n    const addHumidifiersMotorsAmps = (amps) => {\r\n        if(isNaN(amps) || amps === ''){\r\n            return\r\n        }\r\n\r\n        const amps_list = props.preSeasonFormData.humidifiers_motors_amps || []\r\n\r\n        props.updatePreSeasonForm({...props.preSeasonFormData, \r\n            humidifiers_motors_amps:[...amps_list, amps]\r\n        })\r\n    }\r\n\r\n    const popLastHumidifiersMotorsAmps = () => {\r\n        let amps_list = props.preSeasonFormData.humidifiers_motors_amps || []\r\n        amps_list.pop()\r\n        props.updatePreSeasonForm({...props.preSeasonFormData, \r\n            humidifiers_motors_amps:amps_list\r\n        })\r\n    }\r\n\r\n    // updates preseason form completion status\r\n    useEffect(()=>{\r\n        preSeasonIsCompleted()\r\n    },[props.preSeasonFormData])\r\n\r\n    return(\r\n        <Accordion \r\n            elevation={3} \r\n            className={formComplete ? classes.formSuccess : classes.formIncomplete}\r\n        >\r\n            <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n            >\r\n                \r\n                <div style={{ display:'flex', width:'15%'}}> \r\n                    <PlaylistAddCheck fontSize='large' />\r\n\r\n                </div>\r\n                <Typography variant='h6' align='center' style={{width:'70%'}} noWrap>\r\n\r\n                    Pre-Season Form \r\n                    {/* <DoneAll fontSize='medium' /> */}\r\n\r\n                </Typography>\r\n\r\n                <Typography variant='h6' style={{marginLeft:'3px', width:'15%', textAlign: 'end'}} noWrap>\r\n                        {tasksCompleted}/{tasksTotal} \r\n                </Typography>\r\n\r\n            </AccordionSummary>\r\n\r\n            <AccordionDetails>\r\n\r\n            <FormControl component=\"fieldset\"  >\r\n            {/* <Divider /> */}\r\n                <Typography variant='subtitle1'><span style={{textDecoration:'underline'}}>Fresh Air Doors</span></Typography>\r\n                <FormGroup>\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox color='primary' \r\n                            value={props.preSeasonFormData.fresh_air_doors_actuators_lubed_doors_tested} \r\n                            onChange={(e)=>onCheckedHandler('fresh_air_doors_actuators_lubed_doors_tested', e)}\r\n                        />}\r\n                        label=\"Lubricate actuator(s), test door(s) open & closed.\"\r\n                        />\r\n                    \r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  name=\"jason\" \r\n                            value={props.preSeasonFormData.fresh_air_doors_are_calibrated} \r\n                            onChange={(e)=>onCheckedHandler('fresh_air_doors_are_calibrated', e)}\r\n                        />}\r\n                        label=\"Check settings & make necessary calibrations.\"\r\n                        />\r\n                </FormGroup>\r\n\r\n                <Typography variant='subtitle1'><span style={{textDecoration:'underline'}}>Louvers</span></Typography>\r\n                <FormGroup>\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.louver_linkages_lubed_and_tested} \r\n                            onChange={(e)=>onCheckedHandler('louver_linkages_lubed_and_tested', e)}    \r\n                        />}\r\n                        label=\"Lubricate all linkage & ball joints, test louver(s) open & closed.\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.louver_linkages_and_mod_motors_checked} \r\n                            onChange={(e)=>onCheckedHandler('louver_linkages_and_mod_motors_checked', e)}    \r\n                        />}\r\n                        label=\"Check linkage & operation of mod motors.\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.louvers_are_calibrated} \r\n                            onChange={(e)=>onCheckedHandler('louvers_are_calibrated', e)}    \r\n                        />}\r\n                        label=\"Check settings & make necessary calibrations.\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.exhaust_louvers_checked} \r\n                            onChange={(e)=>onCheckedHandler('exhaust_louvers_checked', e)}    \r\n                        />}\r\n                            label=\"Check exhaust louver(s).\"\r\n                        />\r\n                </FormGroup>\r\n\r\n                <Typography variant='subtitle1'><span style={{textDecoration:'underline'}}>Fans</span></Typography>\r\n                <FormGroup>\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.fans_checked_for_cracks_and_damage} \r\n                            onChange={(e)=>onCheckedHandler('fans_checked_for_cracks_and_damage', e)}    \r\n                        />}\r\n                        label=\"Inspect fan propellers & frames for cracks or other damage.\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.fans_motors_tested_and_inspected} \r\n                            onChange={(e)=>onCheckedHandler('fans_motors_tested_and_inspected', e)}    \r\n                        />}\r\n                        label=\"Run fan motor(s) & check for any unusual bearing noise.\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.fans_motors_amps_checked} \r\n                            onChange={(e)=>onCheckedHandler('fans_motors_amps_checked', e)}    \r\n                        />}\r\n                        label={\r\n                            <>\r\n                                <span>Record amperages of fan motors. </span>\r\n                                <div style={{fontWeight:'600'}}>\r\n                                    {\r\n                                        props.preSeasonFormData.fans_motors_amps ?\r\n                                        props.preSeasonFormData.fans_motors_amps.map((f, index) => `(${index+1})${f}a`).join(' - ')\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </>\r\n                        }\r\n                    />\r\n\r\n                    <SingleInputAndButton \r\n                        style={{marginLeft:'20px'}}\r\n                        inputProps={{\r\n                            type:'number',\r\n                            inputMode:\"numeric\",\r\n                            placeholder:'AMPS',\r\n                        }}\r\n                        onClick1={addFanMotorAmps}\r\n                        button1={\r\n                            <>\r\n                                <Add />\r\n                                ADD\r\n                            </>\r\n                        }\r\n\r\n                        button2={\r\n                            <>\r\n                                {/* <BackspaceOutlined /> */}\r\n                                {/* <Backspace /> */}\r\n                                <DeleteForever />\r\n                            </>\r\n                        }\r\n                        onClick2={popLastFanMotorAmps}\r\n                    >\r\n\r\n                    </SingleInputAndButton>\r\n                    \r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.fans_frequency_drives_checked} \r\n                            onChange={(e)=>onCheckedHandler('fans_frequency_drives_checked', e)}    \r\n                        />}\r\n                        label=\"Check operation of Frequency Drive(s).\"\r\n                        />\r\n                </FormGroup>\r\n\r\n                <Typography variant='subtitle1'><span style={{textDecoration:'underline'}}>ClimaCell</span></Typography>\r\n                <FormGroup>\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.climacell_tank_cleaned_refilled_and_float_inspected} \r\n                            onChange={(e)=>onCheckedHandler('climacell_tank_cleaned_refilled_and_float_inspected', e)}    \r\n                        />}\r\n                        label=\"Clean tank, check operation of float valve, and fill tank with fresh water.\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.climacell_pumps_checked_and_cleaned} \r\n                            onChange={(e)=>onCheckedHandler('climacell_pumps_checked_and_cleaned', e)}    \r\n                        />}\r\n                        label=\"Check operation of pump and clean screens around pump.\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.climacell_distribution_pipe_cleaned} \r\n                            onChange={(e)=>onCheckedHandler('climacell_distribution_pipe_cleaned', e)}    \r\n                        />}\r\n                        label=\"Clean distribution pipe on top of ClimaCell.\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.climacell_aspirator_cabinet_and_wick_checked_cleaned} \r\n                            onChange={(e)=>onCheckedHandler('climacell_aspirator_cabinet_and_wick_checked_cleaned', e)}    \r\n                        />}\r\n                        label=\"If applicable, clean aspirator cabinet and check wick.\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.climacell_pump_motors_amps_checked} \r\n                            onChange={(e)=>onCheckedHandler('climacell_pump_motors_amps_checked', e)}    \r\n                        />}\r\n                        label={\r\n                            <>\r\n                                <span>Record amperages of pumps. </span>\r\n                                <div style={{fontWeight:'600'}}>\r\n                                    {\r\n                                        props.preSeasonFormData.climacell_pump_motors_amps ?\r\n                                        props.preSeasonFormData.climacell_pump_motors_amps.map((f, index) => `(${index+1})${f}a`).join(' - ')\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </>\r\n                        }\r\n                        \r\n                    />\r\n\r\n                    <SingleInputAndButton \r\n                        style={{marginLeft:'20px'}}\r\n                        inputProps={{\r\n                            type:'number',\r\n                            inputMode:\"numeric\",\r\n                            placeholder:'AMPS',\r\n                        }}\r\n                        onClick1={addClimcellPumpMotorAmps}\r\n                        button1={\r\n                            <>\r\n                                <Add />\r\n                                ADD\r\n                            </>\r\n                        }\r\n\r\n                        button2={\r\n                            <>\r\n                                {/* <BackspaceOutlined /> */}\r\n                                {/* <Backspace /> */}\r\n                                <DeleteForever />\r\n                            </>\r\n                        }\r\n                        onClick2={popLastClimcellPumpMotorAmps}\r\n                    />\r\n\r\n                </FormGroup>\r\n\r\n                <Typography variant='subtitle1'><span style={{textDecoration:'underline'}}>Humidifiers</span></Typography>\r\n                <FormGroup>\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.humidifiers_water_tubs_float_valves_cleaned_refilled} \r\n                            onChange={(e)=>onCheckedHandler('humidifiers_water_tubs_float_valves_cleaned_refilled', e)}    \r\n                        />}\r\n                        label=\"Clean water tubs, check operation of float valve, and fill with fresh water.\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.humidifiers_motors_tested_inspected} \r\n                            onChange={(e)=>onCheckedHandler('humidifiers_motors_tested_inspected', e)}    \r\n                        />}\r\n                        label=\"Run humidifier motor(s) and check for any unusual bearing noise.\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.humidifiers_motors_amps_checked} \r\n                            onChange={(e)=>onCheckedHandler('humidifiers_motors_amps_checked', e)}    \r\n                        />}\r\n                        label={\r\n                            <>\r\n                                <span>Record amperages of humidifier motors. </span>\r\n                                <div style={{fontWeight:'600'}}>\r\n                                    {\r\n                                        props.preSeasonFormData.humidifiers_motors_amps ?\r\n                                        props.preSeasonFormData.humidifiers_motors_amps.map((f, index) => `(${index+1})${f}a`).join(' - ')\r\n                                        : ''\r\n                                    }\r\n                                </div>\r\n                            </>\r\n                        }\r\n                        />\r\n\r\n                    <SingleInputAndButton \r\n                        style={{marginLeft:'20px'}}\r\n                        inputProps={{\r\n                            type:'number',\r\n                            inputMode:\"numeric\",\r\n                            placeholder:'AMPS',\r\n                        }}\r\n                        onClick1={addHumidifiersMotorsAmps}\r\n                        button1={\r\n                            <>\r\n                                <Add />\r\n                                ADD\r\n                            </>\r\n                        }\r\n\r\n                        button2={\r\n                            <>\r\n                                {/* <BackspaceOutlined /> */}\r\n                                {/* <Backspace /> */}\r\n                                <DeleteForever />\r\n                            </>\r\n                        }\r\n                        onClick2={popLastHumidifiersMotorsAmps}\r\n                    />\r\n\r\n                </FormGroup>\r\n\r\n                <Typography variant='subtitle1'><span style={{textDecoration:'underline'}}>Control Panel</span></Typography>\r\n                <FormGroup>\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.control_panel_modes_tested} \r\n                            onChange={(e)=>onCheckedHandler('control_panel_modes_tested', e)}    \r\n                        />}\r\n                        label=\"\tTest modes of operation for proper function.\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.control_panel_sensors_checked_calibration} \r\n                            onChange={(e)=>onCheckedHandler('control_panel_sensors_checked_calibration', e)}\r\n                        />}\r\n                        label=\"Check sensor(s) calibration - Outdoor air control, plenum, low limit safety, humidity)\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.control_panel_light_tree_bulbs_checked} \r\n                            onChange={(e)=>onCheckedHandler('control_panel_light_tree_bulbs_checked', e)}\r\n                        />}\r\n                        label=\"Check light bulbs in light tree\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.control_panel_cleaned_inside_out} \r\n                            onChange={(e)=>onCheckedHandler('control_panel_cleaned_inside_out', e)}\r\n                        />}\r\n                        label=\"Clean interior and exterior of control panel.\"\r\n                        />\r\n                    <FormControlLabel\r\n                        control={<CustCheckbox  \r\n                            value={props.preSeasonFormData.control_panel_setpoint_is_set} \r\n                            onChange={(e)=>onCheckedHandler('control_panel_setpoint_is_set', e)}\r\n                        />}\r\n                        label=\"Set plenum temperature at 55°. Control panel ok - ready to run.\"\r\n                        />\r\n                </FormGroup>\r\n\r\n            </FormControl>\r\n\r\n            </AccordionDetails>\r\n\r\n        </Accordion>\r\n    )\r\n}\r\nexport default PreSeasonForm;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\RefrigerationStartUpForm.js",["320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342"],"import React, { useEffect } from 'react'\r\nimport { Accordion, AccordionDetails, AccordionSummary, Box, Button, Checkbox, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormGroup, Grid, IconButton, InputLabel, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableRow, TextField, Typography } from '@material-ui/core';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { AcUnit, Add, CheckBox, CheckBoxOutlineBlank, Clear, DeleteForever, DoneAll, DoneOutlined, Edit, ExpandMore } from '@material-ui/icons';\r\nimport DialogRefrigerationUnitStartUp from './DiaglogRefrigerationUnitStartUp';\r\nimport FormRefrigerationSingleUnit from './FormRefrigerationSingleUnit';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    checkbox:{\r\n        \r\n    },\r\n    formSuccess:{\r\n        // backgroundColor: theme.palette.success.light\r\n        backgroundColor: theme.palette.successHighlight.main,\r\n        '& .Mui-focused':{\r\n            backgroundColor: theme.palette.successHighlight.main\r\n        }\r\n    },\r\n    formIncomplete:{\r\n        // backgroundColor: theme.palette.error.light\r\n        backgroundColor: theme.palette.errorHighlight.main,\r\n        '& .Mui-focused':{\r\n            backgroundColor: theme.palette.errorHighlight.main\r\n        }\r\n    }\r\n}))\r\n\r\nconst CustCheckbox = (props) => {\r\n    return(\r\n        <Checkbox \r\n            {...props}\r\n            color='primary'\r\n        />\r\n)}\r\n\r\nconst RefrigerationStartUpForm = (props) => {\r\n    const classes = useStyles()\r\n\r\n    // PROPS VARIABLES HERE \r\n    const refrigForm = props.refrigerationStartUpFormData \r\n    const updateRefrigForm = props.updateRefrigerationStartUpForm \r\n\r\n    // refrigeration form object in parent\r\n    // 'refrigeration_start_up_report':{\r\n    //     'start_up_is_completed':false,\r\n    //     'refrigeration_units':[]\r\n    // },\r\n    const newRefrigerationUnit = () =>{\r\n        return {\r\n        'unit_nickname':'',\r\n        'created_at':(Date.now()),\r\n        'vacuumed_control_panel':false,\r\n        'checked_bypass_doors':false,\r\n        'inspected_contactors':false,\r\n        'compressors':[],\r\n        'test_calibrate_controls':false,\r\n        'check_failure_circuit':false\r\n    }}\r\n\r\n    const [refrigerationDialogOpen, setRefrigerationDialogOpen] = React.useState(false)\r\n    const [selectedIndex, setSelectedIndex] = React.useState(0)\r\n\r\n\r\n    const selectedRefUnit = (index) => {\r\n        if(refrigForm.refrigeration_units && refrigForm.refrigeration_units != ''){\r\n            return refrigForm.refrigeration_units[index]\r\n        }\r\n        return \r\n    }\r\n\r\n    const updateRefUnit = (index, field, value) => {\r\n        console.log(index, field, value)\r\n        let unit = selectedRefUnit(index)\r\n        let otherUnits = refrigForm.refrigeration_units.filter(u => u !== unit)\r\n        let allUnits = [...otherUnits, \r\n                {\r\n                    ...unit,\r\n                    // [field]:event.target.value\r\n                    [field]:value\r\n                }\r\n            ]\r\n\r\n        updateRefrigForm({\r\n            ...refrigForm,\r\n            refrigeration_units:allUnits.sort((a,b)=>\r\n                a.created_at > b.created_at ?\r\n                1 : -1\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n\r\n    const addRefrigerationUnit = () => {\r\n        props.updateRefrigerationStartUpForm({\r\n            ...refrigForm,\r\n            refrigeration_units:[\r\n                ...refrigForm.refrigeration_units,\r\n                newRefrigerationUnit()\r\n            ]\r\n        })\r\n        setSelectedIndex(refrigForm.refrigeration_units.length)\r\n        setRefrigerationDialogOpen(true)\r\n    }\r\n\r\n    const deleteRefUnit = (index) => {\r\n        if(window.confirm(`DELETE Refrigeration Unit ${index+1} ?`) === false){\r\n            return\r\n        }\r\n        let remainingUnits = refrigForm.refrigeration_units.filter((u, count)=> count !== index )\r\n        props.updateRefrigerationStartUpForm({\r\n            ...refrigForm,\r\n            refrigeration_units:[\r\n                ...remainingUnits\r\n            ]\r\n        })\r\n    }\r\n\r\n    const onCheckedHandler = (field, e) => {\r\n        console.log(field, e.target.checked)\r\n        props.updateRefrigerationStartUpForm({...refrigForm, [field]:e.target.checked})\r\n    }\r\n\r\n    return(\r\n        <>\r\n        <Accordion\r\n        // expanded\r\n            className={\r\n                refrigForm.start_up_is_completed === true ? \r\n                classes.formSuccess : classes.formIncomplete\r\n            }\r\n        >\r\n            <AccordionSummary \r\n                expandIcon={<ExpandMore />}\r\n                \r\n            >\r\n\r\n                <div style={{ display:'flex', width:'15%', padding:'3px 0px 0px 0px'}}> \r\n                    {/* <PlaylistAddCheck fontSize='large' /> */}\r\n                    <AcUnit />\r\n                </div>\r\n\r\n                <Typography variant='h6' align='center' style={{width:'70%'}} noWrap>\r\n                    Refrigeration Start Up\r\n                </Typography>\r\n\r\n                <div style={{marginLeft:'3px', width:'15%', textAlign: 'end', paddingTop:'3px'}} >\r\n                    {/* {tasksCompleted}/{tasksTotal}  */}\r\n                    {\r\n                        refrigForm.start_up_is_completed === true ?\r\n                        <CheckBox />\r\n                        // <DoneAll />\r\n                        // <DoneOutlined />\r\n                        :\r\n                        <CheckBoxOutlineBlank />\r\n                    }\r\n                </div>\r\n\r\n            </AccordionSummary>\r\n\r\n            <AccordionDetails >\r\n\r\n                <Grid container direction='row' justify='center'>\r\n                    <Grid item xs={12} sm={12} md={12} lg={12}\r\n                        hidden\r\n                    >\r\n                        <FormControl >\r\n\r\n                            <Typography >\r\n                                <span style={{fontWeight:'600'}}>\r\n                                    Refrigeration Unit:\r\n                                </span>\r\n                                {/* <input /> */}\r\n                            </Typography>\r\n\r\n\r\n\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={12} md={12} lg={12}\r\n                        style={{marginBottom:'15px'}}\r\n                    >\r\n                        {/* {\r\n                            refrigForm.refrigeration_units.map((r,index) => \r\n                                <Typography>\r\n                                    Unit {index+1} {r.unit_nickname ? ' - ' : '' }{r.unit_nickname}\r\n                                </Typography> \r\n                            )\r\n                        } */}\r\n                        {/* <TableContainer component={Paper} >\r\n                            <Table size='small'>\r\n                                <TableBody > */}\r\n                                    <Divider style={{marginTop:'5px', marginBottom:'5px', color:'black'}} />\r\n\r\n                                    {\r\n                                        refrigForm.refrigeration_units.map((r, index)=> (\r\n                                            <div key={r.created_at}>\r\n                                                {/* <TableCell > */}\r\n\r\n                                                    <FormRefrigerationSingleUnit \r\n                                                        // justAdded={true}\r\n                                                        refrigerationUnit={r}\r\n                                                        index={index}\r\n\r\n                                                        getRefUnit={selectedRefUnit}\r\n                                                        updateRefUnit={updateRefUnit}\r\n\r\n                                                        deleteRefUnit={deleteRefUnit}\r\n                                                    />\r\n \r\n                                                {/* </TableCell> */}\r\n                                            </div>\r\n                                        ))\r\n                                    }\r\n                                {/* </TableBody>\r\n\r\n                            </Table>\r\n                        </TableContainer> */}\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={12} md={8} lg={8}>\r\n                        <Button \r\n                            variant='contained' \r\n                            color='primary' \r\n                            fullWidth \r\n                            disableElevation\r\n                            onClick={addRefrigerationUnit}\r\n                            startIcon={\r\n                                <Add />\r\n                            }\r\n                        >\r\n                            Refrigeration Unit\r\n                        </Button>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={10} sm={6} md={5} lg={5}>\r\n                            <FormGroup >\r\n                                <FormControlLabel\r\n                                    style={{display:'flex', justifyContent:'center', marginTop:'15px'}} \r\n                                    control={\r\n                                        <CustCheckbox color='primary' \r\n                                        value={refrigForm.start_up_is_completed} \r\n                                        onChange={(e)=>onCheckedHandler('start_up_is_completed', e)}\r\n                                        />\r\n                                    }\r\n                                    label={'Start Up Completed'}\r\n                                />\r\n                            </FormGroup>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </AccordionDetails>\r\n\r\n        </Accordion>\r\n        \r\n        {/* Dialog to add new unit */}\r\n        {/* <DialogRefrigerationUnitStartUp \r\n            open={refrigerationDialogOpen} \r\n            onClose={()=>setRefrigerationDialogOpen(false)} \r\n            selectedIndex={selectedIndex}\r\n            refrigerationUnits={\r\n                refrigForm ? \r\n                refrigForm.refrigeration_units \r\n                : []\r\n            }\r\n            \r\n            selectedRefUnit={selectedRefUnit}\r\n            updateRefUnit={updateRefUnit}\r\n        /> */}\r\n\r\n        {/* Dialog to update unit */}\r\n        {/* <DialogRefrigerationUnitStartUp \r\n\r\n        /> */}\r\n\r\n        </>\r\n)}\r\nexport default RefrigerationStartUpForm;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\FormRefrigerationSingleUnit.js",["343","344","345","346","347","348"],"import { FormControlLabel, Grid, IconButton, Typography, Checkbox, TextField, Button, Divider } from '@material-ui/core';\r\nimport { Add, AddCircle, DeleteForever } from '@material-ui/icons';\r\nimport React, { useEffect } from 'react'\r\nimport FormRefrigCompressorSingle from './FormRefrigCompressorSingle'\r\n\r\n// const CustCheckbox = (props) => {\r\n//     return(\r\n//         <Checkbox \r\n//             {...props}\r\n//             color='primary'\r\n//         />\r\n// )}\r\n\r\n\r\nconst FormRefrigerationSingleUnit = (props) => {\r\n\r\n    // PROPS\r\n    const refUnit = props.refrigerationUnit\r\n    const index = props.index\r\n    const getRefUnit = props.getRefUnit\r\n    const updateRefUnit = props.updateRefUnit\r\n\r\n    \r\n    const [unitNickname, setUnitNickname] = React.useState(refUnit ? refUnit.unit_nickname : '')\r\n    \r\n    const compressors = refUnit !== undefined ? refUnit.compressors : []\r\n    \r\n    const addCompressor = () => {\r\n        let newCompressor = {\r\n            // 'name':'test compressor', \r\n            'created_at':Date.now(),\r\n            'run_system':false,\r\n            'check_oil':false,\r\n            'check_refrigerant_levels': false,\r\n            'suction_psi':'',\r\n            'discharge_psi':'',\r\n            'heater_amps':[],\r\n            'compressor_loaded_amps':[],\r\n            'fans_amps':[]\r\n        }\r\n        let otherCompressors = [\r\n            ...compressors,\r\n            newCompressor\r\n        ]\r\n        updateRefUnit(index, 'compressors', otherCompressors)\r\n    }\r\n\r\n    const updateCompressor = (compressorIndex, field, value) => {\r\n        let selectedCompressor = compressors[compressorIndex]\r\n        let updatedCompressor = {\r\n            ...selectedCompressor,\r\n            [field]:value\r\n        }\r\n        let freshCompressors = compressors\r\n        compressors[compressorIndex] = updatedCompressor\r\n        updateRefUnit(index, 'compressors', freshCompressors)\r\n    }\r\n\r\n    const deleteCompressor = (compIndex, created_at) => {\r\n        if(window.confirm(`DELETE Compressor ${compIndex+1} from Unit ${index+1} ?`) === false){\r\n            return\r\n        }\r\n        let remainingCompressors = compressors.filter(c => c.created_at !== created_at)\r\n        updateRefUnit(index, 'compressors', remainingCompressors)\r\n        console.log('delete compressor....', index, 'compressors', remainingCompressors)\r\n    }\r\n\r\n    //set cursor focus to nickname field on initial\r\n    useEffect(()=>{\r\n        document.getElementById(`unit${index}`).focus()\r\n        // document.getElementById(`unit${index}`).scrollTop -= 10\r\n        document.getElementById(`unit${index}`).scrollIntoView({behavior: \"smooth\"})\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        console.log(`updating Unit: ${index}`, refUnit, )\r\n    },[refUnit])\r\n\r\n    useEffect(()=>{\r\n        console.log(`compressors...`, compressors )\r\n    },[compressors])\r\n\r\n    return(\r\n        <>\r\n\r\n            <Grid container spacing={0}>\r\n\r\n                <Grid item  xs={12} sm={12} md={12}>\r\n                    {/* <Typography style={{display:'flex', justifyContent:'space-between', width:'100%'}}> */}\r\n                        {/* <div> */}\r\n                            {/* {index+1} */}\r\n                            {/* <span style={{fontWeight:'600'}}>{refUnit.unit_nickname}</span> */}\r\n                            <Grid container direction='row' justify='space-between'>\r\n\r\n                                <TextField \r\n                                    id={`unit${index}`}\r\n                                    variant='outlined'\r\n                                    margin='dense'\r\n                                    label={`Unit ${index+1} Nickname`}\r\n                                    style={{marginRight:'15px', maxWidth:'70%'}}\r\n                                    // fullWidth\r\n                                    // value={getRefUnit(refUnitIndex) ? getRefUnit(refUnitIndex).unit_nickname : ''}\r\n                                    // onChange={(e)=>props.updateRefUnit(refUnitIndex, 'unit_nickname', e)}\r\n                                    // ref={ref}\r\n                                    value={unitNickname || ''}\r\n                                    onChange={e=>setUnitNickname(e.target.value)}\r\n                                    onBlur={(e)=>props.updateRefUnit(index, 'unit_nickname', e.target.value)}\r\n                                    />\r\n                            {/* </div> */}\r\n                                <IconButton color='secondary' \r\n                                    onClick={()=> props.deleteRefUnit(index)}\r\n                                    >\r\n                                    {/* <Edit /> */}\r\n                                    <DeleteForever />\r\n                                </IconButton>\r\n\r\n                            </Grid>\r\n                    {/* </Typography> */}\r\n                </Grid>\r\n\r\n                <Grid item >\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Checkbox \r\n                                    color='primary'\r\n                                    checked={refUnit.vacuumed_control_panel || false}\r\n                                    // value={getRefUnit(index) ? getRefUnit(index).vacuumed_control_panel : false}\r\n                                    onChange={(e)=>updateRefUnit(index, 'vacuumed_control_panel', e.target.checked)}\r\n\r\n                                />\r\n                            }\r\n                            // disabled\r\n                            label=\"Vacuumed Control Panels\"\r\n                            />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    {/* {refUnit.checked_bypass_doors  ? 'yes':'no'} */}\r\n                    <FormControlLabel\r\n                            control={\r\n                                <Checkbox \r\n                                color='primary'\r\n                                checked={refUnit.checked_bypass_doors || false}\r\n                                // value={getRefUnit(index) ? getRefUnit(index).checked_bypass_doors : false}\r\n                                onChange={(e)=>updateRefUnit(index, 'checked_bypass_doors', e.target.checked)}\r\n\r\n                                />\r\n                            }\r\n                            // disabled\r\n                            label=\"Check Bypass Doors\"\r\n                            />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <FormControlLabel\r\n                            control={\r\n                                <Checkbox \r\n                                color='primary'\r\n                                checked={refUnit.inspected_contactors || false}\r\n                                // value={getRefUnit(index) ? getRefUnit(index).inspected_contactors : false}\r\n                                onChange={(e)=>updateRefUnit(index, 'inspected_contactors', e.target.checked)}\r\n                                />\r\n                            }\r\n                            // disabled\r\n                            label=\"Inspect Contactors\"\r\n                            />\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n            <Grid container style={{margin:'5px 0px'}}>\r\n                    <Grid item xs={12} sm={12} md={12} \r\n                        style={{\r\n                            backgroundColor:'lightgray',\r\n                            padding:'10px',\r\n                            marginBottom:'10px',\r\n                        }}\r\n                        hidden={compressors === undefined || compressors.length === 0}\r\n                    >\r\n                        { compressors !== undefined ? \r\n                            compressors.map((c,comp_index) => \r\n                                <>\r\n                                    <Divider style={{marginBottom:'10px'}} \r\n                                        hidden={comp_index === 0}\r\n                                    />\r\n                                    <FormRefrigCompressorSingle \r\n                                        key={c.created_at}\r\n                                        refIndex={index}\r\n                                        index={comp_index}\r\n                                        compressor={c}\r\n                                        updateCompressor={updateCompressor}\r\n                                        deleteCompressor={deleteCompressor}\r\n                                    />\r\n                                </>\r\n                            )\r\n                            :\r\n                            ''\r\n                        }\r\n\r\n                    </Grid>\r\n                <Button \r\n                    onClick={()=>addCompressor()}\r\n                    startIcon={\r\n                        // <AddCircle /> \r\n                        <Add />\r\n                    }\r\n                    variant='contained'\r\n                    color={'primary'}\r\n                    disableElevation\r\n                    size={'small'}\r\n                >\r\n                     compressor\r\n                </Button>\r\n            </Grid>\r\n\r\n            <Grid container >\r\n                <Grid item>\r\n                    <FormControlLabel\r\n                            control={\r\n                                <Checkbox \r\n                                color='primary'\r\n                                checked={refUnit.test_calibrate_controls || false}\r\n                                // value={getRefUnit(index) ? getRefUnit(index).test_calibrate_controls : false}\r\n                                onChange={(e)=>updateRefUnit(index, 'test_calibrate_controls', e.target.checked)}\r\n                                />\r\n                            }\r\n                            // disabled\r\n                            label=\"Test & Calibrate Controls\"\r\n                            />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                    <FormControlLabel\r\n                            control={\r\n                                <Checkbox \r\n                                color='primary'\r\n                                checked={refUnit.check_failure_circuit || false}\r\n                                // value={getRefUnit(index) ? getRefUnit(index).check_failure_circuit : false}\r\n                                onChange={(e)=>updateRefUnit(index, 'check_failure_circuit', e.target.checked)}\r\n                                />\r\n                            }\r\n                            // disabled\r\n                            label=\"Check Failure Circuit Operation\"\r\n                            />\r\n                </Grid>\r\n\r\n            </Grid>\r\n                <Divider style={{marginTop:'15px', marginBottom:'15px', color:'black'}} />\r\n            \r\n        </>\r\n    )\r\n}\r\nexport default FormRefrigerationSingleUnit;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\DiaglogRefrigerationUnitStartUp.js",["349","350","351","352"],"import React, { useEffect } from 'react'\r\n\r\nimport { Button, ButtonGroup, Checkbox, \r\n    Dialog, DialogContent, DialogTitle, Divider, \r\n    Fade, \r\n    FormControlLabel, FormGroup, Grid, IconButton, \r\n    TextField, Typography \r\n} from '@material-ui/core';\r\n\r\nimport { Add, AddCircle, Clear, Delete, DeleteForever, Save } from '@material-ui/icons';\r\n\r\n\r\nconst CustCheckbox = (props) => {\r\n    return(\r\n        <Checkbox \r\n            {...props}\r\n            color='primary'\r\n        />\r\n)}\r\n\r\nconst DialogRefrigerationUnitStartUp = (props) => {\r\n    // function debounce(func, wait, immediate) {\r\n    //     var timeout;\r\n    //     return function() {\r\n    //         var context = this, args = arguments;\r\n    //         var later = function() {\r\n    //             timeout = null;\r\n    //             if (!immediate) func.apply(context, args);\r\n    //         };\r\n    //         var callNow = immediate && !timeout;\r\n    //         clearTimeout(timeout);\r\n    //         timeout = setTimeout(later, wait);\r\n    //         if (callNow) func.apply(context, args);\r\n    //     };\r\n    // };\r\n\r\n    // const test = (n, e) => {\r\n    //     e.persist()\r\n    //     props.updateRefUnit(n, 'unit_nickname', e.target.value)\r\n    // }\r\n\r\n    // const sendDebounce = debounce(test, 2000)\r\n\r\n    // PROPS variables\r\n    \r\n    const getRefUnit = props.selectedRefUnit\r\n    const refUnitIndex = props.selectedIndex\r\n\r\n    const [unitNickname, setUnitNickname] = React.useState('')\r\n\r\n    useEffect(()=>{\r\n        console.log('...', unitNickname)\r\n    },[refUnitIndex])\r\n\r\n    return(\r\n        // This dialog is too slow with text fields because they are nested fields\r\n        // onBlur is used to save updates to the text fields\r\n        // text fields (like unit_nickname) must be stored in local state until input onBlur fires\r\n        // on blur updates the root form\r\n        // the dialog HOWEVER does not unmount (state remains the same) between opening\r\n        // ...to remedy this 'onEnter' function is used to correctly set the state whenever the dialog is opened\r\n        // ...onEnter fires BEFORE loading dialog\r\n        // ...future alternative => https://stackoverflow.com/questions/23123138/perform-debounce-in-react-js\r\n        \r\n        <Dialog \r\n            open={props.open} \r\n            onClose={()=>props.onClose(false)} \r\n            maxWidth={'md'} \r\n            fullWidth\r\n            scroll='paper'\r\n            onEntering={()=>setUnitNickname(getRefUnit(refUnitIndex).unit_nickname)}\r\n            // fullScreen\r\n        >\r\n            <DialogTitle style={{paddingBottom: '10px'}}>\r\n                <Grid container \r\n                    alignItems={'center'}\r\n                    justify='space-between'\r\n                    direction='row'\r\n                    wrap='nowrap'\r\n                    // style={{display: 'flex',justifyContent:'space-between', width:'100%'}}\r\n                >\r\n                    {/* <Typography \r\n                        variant='h5'\r\n                        noWrap\r\n                    >\r\n                        Refrigeration Unit - {props.selectedRow ? props.getTechFullName(props.selectedRow.id) : '1'} \r\n                    </Typography> */}\r\n                        <Grid item xs={10} sm={6} md={4} >\r\n                            <TextField \r\n                                variant='outlined'\r\n                                margin='dense'\r\n                                label='Unit Nickname'\r\n                                style={{marginRight:'15px'}}\r\n                                fullWidth\r\n                                // value={getRefUnit(refUnitIndex) ? getRefUnit(refUnitIndex).unit_nickname : ''}\r\n                                // onChange={(e)=>props.updateRefUnit(refUnitIndex, 'unit_nickname', e)}\r\n\r\n                                value={unitNickname || ''}\r\n                                onChange={e=>setUnitNickname(e.target.value)}\r\n                                onBlur={(e)=>props.updateRefUnit(refUnitIndex, 'unit_nickname', e.target.value)}\r\n\r\n                            />\r\n                        </Grid>\r\n                    <IconButton onClick={()=>props.onClose(false)}>\r\n                        <Clear />\r\n                    </IconButton>\r\n                </Grid>\r\n            </DialogTitle>\r\n\r\n            {/* <Divider variant='fullWidth'/> */}\r\n\r\n            <DialogContent dividers={true}>\r\n                <Grid container >\r\n                    {/* <Grid item xs={12} sm={12} md={4}>\r\n                        <TextField \r\n                            variant='outlined'\r\n                            margin='dense'\r\n                            label='Unit Nickname'\r\n                            style={{marginRight:'15px'}}\r\n                        />\r\n                    </Grid> */}\r\n                    <Grid item >\r\n                        <FormGroup row>\r\n\r\n                            <FormControlLabel\r\n                                control={<CustCheckbox  \r\n                                    value={getRefUnit(refUnitIndex) ? getRefUnit(refUnitIndex).vacuumed_control_panel : false}\r\n                                    onChange={(e)=>props.updateRefUnit(refUnitIndex, 'vacuumed_control_panel', e.target.checked)}\r\n\r\n                                    // value={props.preSeasonFormData.louver_linkages_lubed_and_tested} \r\n                                    // onChange={(e)=>onCheckedHandler('louver_linkages_lubed_and_tested', e)}    \r\n                                />}\r\n                                label=\"Vacuumed Control Panels\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<CustCheckbox  \r\n                                    value={getRefUnit(refUnitIndex) ? getRefUnit(refUnitIndex).checked_bypass_doors : false}\r\n                                    onChange={(e)=>props.updateRefUnit(refUnitIndex, 'checked_bypass_doors', e.target.checked)}\r\n\r\n                                    // value={props.preSeasonFormData.louver_linkages_lubed_and_tested} \r\n                                    // onChange={(e)=>onCheckedHandler('louver_linkages_lubed_and_tested', e)}    \r\n                                />}\r\n                                label=\" Check Bypass Doors\"\r\n                            />\r\n                            <FormControlLabel\r\n                                control={<CustCheckbox  \r\n                                    value={getRefUnit(refUnitIndex) ? getRefUnit(refUnitIndex).inspected_contactors : false}\r\n                                    onChange={(e)=>props.updateRefUnit(refUnitIndex, 'inspected_contactors', e.target.checked)}\r\n\r\n                                    // value={props.preSeasonFormData.louver_linkages_lubed_and_tested} \r\n                                    // onChange={(e)=>onCheckedHandler('louver_linkages_lubed_and_tested', e)}    \r\n                                />}\r\n                                label=\"Inspect Contactors\"\r\n                            />\r\n                        </FormGroup>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                        <Divider />\r\n                        <Typography >\r\n                            Compressors\r\n\r\n                            <IconButton color='primary'>\r\n                                <AddCircle />\r\n                            </IconButton>\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={12} md={12} >\r\n                        <Divider />\r\n                        <FormGroup row>\r\n                            \r\n                            <FormControlLabel\r\n                                control={<CustCheckbox  \r\n                                    value={getRefUnit(refUnitIndex) ? getRefUnit(refUnitIndex).test_calibrate_controls : false}\r\n                                    onChange={(e)=>props.updateRefUnit(refUnitIndex, 'test_calibrate_controls', e.target.checked)}\r\n\r\n                                    // value={props.preSeasonFormData.louver_linkages_lubed_and_tested} \r\n                                    // onChange={(e)=>onCheckedHandler('louver_linkages_lubed_and_tested', e)}    \r\n                                    />}\r\n                                    label=\"Test & Calibrate Controls\"\r\n                            />\r\n\r\n                            <FormControlLabel\r\n                                control={<CustCheckbox  \r\n                                    value={getRefUnit(refUnitIndex) ? getRefUnit(refUnitIndex).check_failure_circuit : false}\r\n                                    onChange={(e)=>props.updateRefUnit(refUnitIndex, 'check_failure_circuit', e.target.checked)}\r\n\r\n                                    // value={props.preSeasonFormData.louver_linkages_lubed_and_tested} \r\n                                    // onChange={(e)=>onCheckedHandler('louver_linkages_lubed_and_tested', e)}    \r\n                                />}\r\n                                label=\"Check Failure Circuit Operation\"\r\n                            />\r\n\r\n                        </FormGroup>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n\r\n                {/* <Divider variant='fullWidth'/> */}\r\n\r\n            </DialogContent>\r\n\r\n\r\n            {/* <DialogContent > */}\r\n                \r\n            <Grid item xs={12} sm={12} md={12} style={{margin:'5px'}}>\r\n                <Grid container >\r\n                    <Grid item xs={12}>\r\n                        <ButtonGroup fullWidth >\r\n\r\n                        <Button                            \r\n                            variant='contained'\r\n                            color='primary'\r\n                            startIcon={\r\n                                // <Save />\r\n                                <Add />\r\n                            }\r\n                            fullWidth\r\n                            \r\n                            >\r\n                            Compressor\r\n                        </Button>\r\n                    {/* </Grid>\r\n                    <Grid item xs={5}> */}\r\n\r\n                        <Button                            \r\n                            variant='contained'\r\n                            color='secondary'\r\n                            startIcon={\r\n                                // <Save />\r\n                                <DeleteForever />\r\n                            }\r\n                            // fullWidth\r\n                            style={{width:'50%'}}\r\n                            >\r\n                            Unit\r\n                        </Button>\r\n                        </ButtonGroup>\r\n                    </Grid>\r\n                </Grid>\r\n                {/* <Button \r\n                    variant='contained'\r\n                    color='primary'\r\n                >\r\n                    +Compressor\r\n                </Button> */}\r\n            </Grid>\r\n            {/* </DialogContent> */}\r\n\r\n\r\n        </Dialog>\r\n    )\r\n}\r\nexport default DialogRefrigerationUnitStartUp;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\DialogFormEditHours.js",["353","354","355"],"import React, { useEffect, useState } from 'react'\r\nimport FormButton from '../globalComponents/FormButton'\r\nimport {\r\n    Dialog,\r\n    DialogContent,\r\n    DialogTitle,\r\n    TextField,\r\n    Grid,\r\n    InputAdornment,\r\n    MenuItem,\r\n    Divider,\r\n    ButtonGroup,\r\n    IconButton,\r\n} from '@material-ui/core'\r\nimport { \r\n    Clear,\r\n    ClearAll,\r\n    Delete,\r\n    Save \r\n} from '@material-ui/icons'\r\n\r\n\r\nconst DialogFormEditHours = (props) => {\r\n\r\n    useEffect(()=>{\r\n        setTechInfo(props.selectedRow)\r\n    },[props.selectedRow])\r\n\r\n    const [ techInfo, setTechInfo ] = useState({})\r\n\r\n    const submitChanges = () => {\r\n        props.submitChange(techInfo)\r\n        props.onClose(false)\r\n    }\r\n\r\n    const onChangeTechInfo = (field, e) => {\r\n        setTechInfo({...techInfo, [field]:e.target.value})\r\n    }\r\n\r\n    const deleteTech = () => {\r\n        props.removeRow(techInfo.id)\r\n        props.onClose(false)\r\n    }\r\n    \r\n    return(\r\n        <Dialog open={props.open} onClose={()=>props.onClose(false)} maxWidth='sm' >\r\n            <DialogTitle>\r\n                <div style={{display: 'flex',justifyContent:'space-between', width:'100%'}}>\r\n                    <div>Hours - {props.selectedRow ? props.getTechFullName(props.selectedRow.id) : ''} </div>\r\n                    <IconButton onClick={()=>props.onClose(false)}>\r\n                        <Clear />\r\n                    </IconButton>\r\n                </div>\r\n                <Divider variant='fullWidth'/>\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <Grid container spacing={1} justify='space-between'>\r\n                    <Grid item xs={6} sm={6} md={6}>\r\n                        <TextField\r\n                            label='Work Hours'\r\n                            variant='outlined' \r\n                            margin='dense'\r\n                            type='number'\r\n                            inputProps={{\r\n                                'step': '0.1',\r\n                                'min':'0'\r\n                                }}\r\n                            fullWidth\r\n                            value={techInfo ? techInfo.work_hours : ''}\r\n                            onChange={(e)=>onChangeTechInfo('work_hours', e)}\r\n                            helperText={props.elapsedTime ? `Spanned ${props.elapsedTime} hrs` : ''}\r\n                            />\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={6} md={6}>\r\n                        <TextField\r\n                            label='No Charge'\r\n                            variant='outlined' \r\n                            margin='dense'\r\n                            placeholder='Hours'\r\n                            type='number'\r\n                            inputProps={{\r\n                                'step': '0.1',\r\n                                'min':'0'\r\n                                }}\r\n                            fullWidth\r\n                            value={techInfo ? techInfo.no_charge_hours : ''}\r\n                            onChange={(e)=>onChangeTechInfo('no_charge_hours', e)}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={12} md={12}>\r\n                        <TextField\r\n                            label='Notes'\r\n                            variant='outlined' \r\n                            margin='dense'\r\n                            fullWidth\r\n                            multiline\r\n                            rows='3'\r\n                            rowsMax='3'\r\n                            value={techInfo ? techInfo.notes : ''}\r\n                            onChange={(e)=>onChangeTechInfo('notes', e)}\r\n                            />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={2} sm={4} md={4} ></Grid>\r\n\r\n                    <Grid item xs={8} sm={4} md={4} >\r\n                        <ButtonGroup fullWidth >\r\n                            <FormButton onClick={submitChanges}><Save />  Save </FormButton>\r\n                            <FormButton onClick={deleteTech} bgColor={'grey'}><Delete />  Remove</FormButton>\r\n                        </ButtonGroup>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={2} sm={4} md={4} ></Grid>\r\n\r\n                </Grid>\r\n\r\n            </DialogContent>\r\n        </Dialog>\r\n    )\r\n}\r\nexport default DialogFormEditHours;",["356","357"],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\FormRefrigCompressorSingle.js",["358","359","360","361","362","363","364","365","366"],"import React, { useEffect, useState } from 'react'\r\nimport { FormControlLabel, Grid, IconButton, Typography, Checkbox, TextField, Button, Divider } from '@material-ui/core';\r\nimport { Add, AddCircle, Cancel, DeleteForever, ExitToApp } from '@material-ui/icons';\r\nimport SingleInputAndButton from '../globalComponents/SingleInputUncontrolledAndButton'\r\n\r\n\r\nconst FormRefrigCompressorSingle = (props) => {\r\n    // PROPS variables\r\n    const refIndex = props.refIndex\r\n    const index = props.index\r\n    const compressor = props.compressor\r\n    const updateCompressor = props.updateCompressor\r\n    const deleteCompressor = props.deleteCompressor\r\n\r\n    const [suctionPSI, setSuctionPSI] = useState(compressor ? compressor.suction_psi : '')\r\n    const [dischargePSI, setDischargePSI] = useState(compressor ? compressor.discharge_psi : '')\r\n    const [heaterAmps, setHeaterAmps] = useState(compressor ? [...compressor.heater_amps] : [,,])\r\n    const [compressorLoaded, setCompressorLoaded] = useState(compressor ? [...compressor.compressor_loaded_amps] : [,,])\r\n    const [newFanAmps, setNewFanAmps] = useState([])\r\n\r\n    const addFanAmps = () => {\r\n        if(newFanAmps.length === 0){return}\r\n        console.log(newFanAmps)\r\n        updateCompressor(index, 'fans_amps', [...compressor.fans_amps, newFanAmps])\r\n        setNewFanAmps([])\r\n    }\r\n\r\n    const deleteFan = (fanIndex) => {\r\n        const element = document.getElementById(`ref${refIndex}comp${index}fan${fanIndex}`)\r\n        const alertMessage = `DELETE Fan ${fanIndex+1} from Unit ${refIndex+1} Compressor ${index+1} ?`\r\n\r\n        // highlight target element\r\n        element.style.backgroundColor = 'darkgrey'\r\n        if(window.confirm(alertMessage) === false){\r\n            // animation for canel delete\r\n            element.style.transition = 'all .75s linear'\r\n            element.style.backgroundColor = 'transparent'\r\n            setTimeout(()=>{\r\n                element.style.transition = ''\r\n            }, 750)\r\n            return\r\n        }\r\n\r\n        // delayed delete so user can see which element is being deleted\r\n        setTimeout(\r\n            ()=>{\r\n                element.style.backgroundColor = 'transparent'\r\n                let remainingFans = compressor.fans_amps.filter((f, count) => count != fanIndex)\r\n                updateCompressor(index, 'fans_amps', remainingFans)\r\n            }\r\n        , 350)\r\n    }\r\n\r\n    return(\r\n        <Grid container direction='row'>\r\n                <Grid item xs={12} sm={12} md={12} \r\n                    style={{display:'flex'}}\r\n                    justify={'space-between'}\r\n                >\r\n                    <Typography style={{textDecoration:'underline'}}>\r\n                        Compressor {index+1} \r\n                    </Typography>\r\n                    <IconButton \r\n                        color='secondary' \r\n                        onClick={()=> deleteCompressor(index, compressor.created_at)}\r\n                        style={{padding:'3px'}}\r\n                    >\r\n                        {/* <Edit /> */}                        \r\n                        <DeleteForever />\r\n                    </IconButton>\r\n                </Grid>\r\n\r\n            <Grid item>\r\n            <Grid container>\r\n                <Grid item>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox \r\n                            color='primary'\r\n                            checked={compressor.run_system || false}\r\n                            onChange={(e)=>updateCompressor(index, 'run_system', e.target.checked)}\r\n                            />\r\n                        }\r\n                        // disabled\r\n                        label=\"Run System\"\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                <FormControlLabel\r\n                        control={\r\n                            <Checkbox \r\n                            color='primary'\r\n                            checked={compressor.check_oil || false}\r\n                            onChange={(e)=>updateCompressor(index, 'check_oil', e.target.checked)}\r\n                            />\r\n                        }\r\n                        // disabled\r\n                        label=\"Check Oil\"\r\n                    />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                <FormControlLabel\r\n                        control={\r\n                            <Checkbox \r\n                            color='primary'\r\n                            checked={compressor.check_refrigerant || false}\r\n                            onChange={(e)=>updateCompressor(index, 'check_refrigerant', e.target.checked)}\r\n                            />\r\n                        }\r\n                        // disabled\r\n                        label=\"Check Refrigerant\"\r\n                    />\r\n                </Grid>\r\n            </Grid>       \r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={5} md={5} lg={4}>\r\n\r\n            <Grid container >\r\n                    <Grid item \r\n                        style={{display:'flex', padding:'9px 0px', marginRight:'10px'}}\r\n                    >\r\n                        <Typography >\r\n                            Suction\r\n                        </Typography>\r\n                        <input \r\n                            style={{width:'55px', maxHeight:'20px', marginLeft:'5px', }}\r\n                            placeholder=' PSI'\r\n                            type='number'\r\n                            value={suctionPSI}\r\n                            onChange={(e)=>setSuctionPSI(e.target.value)}\r\n                            onBlur={()=>updateCompressor(index, 'suction_psi', suctionPSI)}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item \r\n                        style={{display:'flex', padding:'9px 0px'}}\r\n                    >\r\n                        <Typography >\r\n                            Discharge\r\n                        </Typography>\r\n                        <input \r\n                            style={{width:'55px', maxHeight:'20px', marginLeft:'5px'}}\r\n                            placeholder=' PSI'\r\n                            type='number'\r\n                            value={dischargePSI}\r\n                            onChange={(e)=>setDischargePSI(e.target.value)}\r\n                            onBlur={()=>updateCompressor(index, 'discharge_psi', dischargePSI)}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                            \r\n            </Grid>\r\n\r\n            <Grid container >\r\n\r\n            <Grid item \r\n                style={{display:'flex', padding:'9px 0px', marginRight:'16px'}}\r\n            >\r\n                <Grid container >\r\n\r\n                    <Grid item>\r\n                        <Typography noWrap>\r\n                            Heater Amps\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={'auto'}>\r\n                        <input \r\n                            style={{width:'55px', maxHeight:'20px', marginLeft:'5px'}}\r\n                            placeholder='  P1'\r\n                            type='number'\r\n                            value={heaterAmps[0]}\r\n                            onChange={(e)=>setHeaterAmps([e.target.value, heaterAmps[1], heaterAmps[2]])}\r\n                            onBlur={()=>updateCompressor(index, 'heater_amps', heaterAmps)}\r\n                        />\r\n                        <input \r\n                            style={{width:'55px', maxHeight:'20px', marginLeft:'1px'}}\r\n                            placeholder='  P2'\r\n                            type='number'\r\n\r\n                            value={heaterAmps[1]}\r\n                            onChange={(e)=>setHeaterAmps([heaterAmps[0], e.target.value, heaterAmps[2]])}\r\n                            onBlur={()=>updateCompressor(index, 'heater_amps', heaterAmps)}\r\n\r\n                        />\r\n                        <input \r\n                            style={{width:'55px', maxHeight:'20px', marginLeft:'1px'}}\r\n                            placeholder='  P3'\r\n                            type='number'\r\n\r\n                            value={heaterAmps[2]}\r\n                            onChange={(e)=>setHeaterAmps([heaterAmps[0], heaterAmps[1], e.target.value])}\r\n                            onBlur={()=>updateCompressor(index, 'heater_amps', heaterAmps)}\r\n                        />\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Grid item \r\n                style={{display:'flex', padding:'9px 0px', marginRight:'16px'}}\r\n            >\r\n                <Grid container >\r\n                    <Grid item>\r\n                        <Typography noWrap>\r\n                            Compressor Loaded \r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={'auto'}>\r\n                        <input \r\n                            style={{width:'55px', maxHeight:'20px', marginLeft:'5px'}}\r\n                            placeholder='  P1'\r\n                            type='number'\r\n                            value={compressorLoaded[0]}\r\n                            onChange={(e)=>setCompressorLoaded([e.target.value, compressorLoaded[1], compressorLoaded[2]])}\r\n                            onBlur={()=>updateCompressor(index, 'compressor_loaded_amps', compressorLoaded)}\r\n                            />\r\n                        <input \r\n                            style={{width:'55px', maxHeight:'20px', marginLeft:'1px'}}\r\n                            placeholder='  P2'\r\n                            type='number'\r\n                            value={compressorLoaded[1]}\r\n                            onChange={(e)=>setCompressorLoaded([ compressorLoaded[0], e.target.value, compressorLoaded[2]])}\r\n                            onBlur={()=>updateCompressor(index, 'compressor_loaded_amps', compressorLoaded)}\r\n                            />\r\n                        <input \r\n                            style={{width:'55px', maxHeight:'20px', marginLeft:'1px'}}\r\n                            placeholder='  P3'\r\n                            type='number'\r\n                            value={compressorLoaded[2]}\r\n                            onChange={(e)=>setCompressorLoaded([compressorLoaded[2], compressorLoaded[1], e.target.value])}\r\n                            onBlur={()=>updateCompressor(index, 'compressor_loaded_amps', compressorLoaded)}\r\n                            />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            </Grid>\r\n\r\n            <Grid container \r\n                style={{display:'flex', padding:'9px 0px'}}\r\n            >\r\n\r\n                <Grid item xs={12}\r\n                >\r\n                    <Typography noWrap>\r\n                        Fan Amps:\r\n                    </Typography>\r\n                </Grid>\r\n\r\n                {\r\n                    compressor ? \r\n                        compressor.fans_amps.map( (f, fanIndex) => \r\n                            <Grid item \r\n                                id={`ref${refIndex}comp${index}fan${fanIndex}`}\r\n                                style={{display:'flex'}} \r\n                            >\r\n                                <Typography style={{marginLeft:'15px', padding:'5px'}}> \r\n                                    [Fan {fanIndex+1}] {f[0] || '- - '}a {f[1] || ' - - '}a {f[2] || '- - '}a \r\n                                </Typography>\r\n                                <IconButton style={{padding:'5px', marginLeft:'10px'}}\r\n                                    onClick={()=>deleteFan(fanIndex)}\r\n                                >\r\n                                    <Cancel fontSize={'small'} />\r\n                                </IconButton>\r\n                            </Grid>\r\n                        )\r\n                        : ''\r\n                }\r\n\r\n                <Grid item xs={12} \r\n                    style={{marginTop:'10px'}}\r\n                >\r\n                    <input \r\n                        type='number'\r\n                        style={{width:'55px', maxHeight:'20px', marginLeft:'0px'}}\r\n                        placeholder='  P1'\r\n                        value={newFanAmps[0] || ''}\r\n                        onChange={(e)=>setNewFanAmps([e.target.value, newFanAmps[1], newFanAmps[2]])}\r\n                    />\r\n                    <input \r\n                        type='number'\r\n                        style={{width:'55px', maxHeight:'20px', marginLeft:'1px'}}\r\n                        placeholder='  P2'\r\n                        value={newFanAmps[1] || ''}\r\n                        onChange={(e)=>setNewFanAmps([ newFanAmps[0], e.target.value, newFanAmps[2]])}\r\n                    />\r\n                    <input \r\n                        type='number'\r\n                        style={{width:'55px', maxHeight:'20px', marginLeft:'1px'}}\r\n                        placeholder='  P3'\r\n                        value={newFanAmps[2] || ''}\r\n                        onChange={(e)=>setNewFanAmps([ newFanAmps[0], newFanAmps[1], e.target.value])}\r\n                    />\r\n                    <Button \r\n                        disableElevation\r\n                        style={{width:'50px', maxHeight:'20px', margin:'-2px 2px 0px'}}\r\n                        variant={'contained'}\r\n                        color={'primary'}\r\n                        startIcon={<Add />}\r\n                        onClick={()=>addFanAmps()}\r\n                    >\r\n                        Fan\r\n                    </Button>\r\n                    {/* <input type={'submit'} value='+ FAN' style={{backgroundColor:'grey', maxHeight:'20px', marginLeft:'5px'}} /> */}\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n        </Grid>\r\n    )\r\n}\r\nexport default FormRefrigCompressorSingle;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\NotFound.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\AppLayout.js",["367","368"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { AppBar,\r\n        Toolbar,\r\n        Typography,\r\n        List,\r\n        IconButton,\r\n        Drawer,\r\n        Hidden,\r\n        SwipeableDrawer,\r\n    } from '@material-ui/core';\r\n\r\nimport {AccountBox,\r\n        Notifications,\r\n        Menu,\r\n    } from '@material-ui/icons'\r\n\r\nimport  AppsMenu from './AppsMenu'\r\n\r\nimport Router_AppTitle from './Router_AppTitle'\r\nimport Router_InAppSideMenu from './Router_InAppSideMenu'\r\n// --------------------------------------------------------------------\r\n\r\nexport const drawerWidth = 230;\r\nexport const toolbarHeight = 48;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    grow: {\r\n        flexGrow: 1,\r\n    },\r\n    title: {\r\n        overflow: 'hidden',\r\n        whiteSpace: 'nowrap',\r\n        textOverflow: 'ellipsis',\r\n        maxWidth: '55vw',\r\n    },\r\n    appBar: {\r\n        [theme.breakpoints.up('md')]: {\r\n          width: `calc(100% - ${drawerWidth}px)`,\r\n          marginLeft: drawerWidth,\r\n        },\r\n        top: 0,\r\n        bottom: 'auto'\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    toolbarIcon:{\r\n        color: theme.palette.secondary.light\r\n        // color: theme.palette.success.main\r\n    },\r\n    toolbar_height:{\r\n        minHeight: toolbarHeight,\r\n    },\r\n    navMenuContainer: {\r\n        [theme.breakpoints.up('sm')]: {\r\n          width: drawerWidth,\r\n          flexShrink: 0,\r\n        },\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        backgroundColor: theme.palette.primary.main,\r\n        flex: 1, //this makes the elements in the drawer stretch out for 100% coverage,\r\n        '&.MuiList-padding': {\r\n            padding: '0px',\r\n        },\r\n        overflow: 'auto',\r\n        maxHeight: '100vh',\r\n        // transform: 'TranslateY(100%)',\r\n        // overflow: 'auto',\r\n    },\r\n    drawerPaper: {\r\n        \"& .MuiPaper-root\": {\r\n            border: 'none',\r\n            boxShadow: \"2px 0px 14px rgba(0,0,0,0.75);\",\r\n        }\r\n    },\r\n    appContentWindow: {\r\n        height: `calc(100vh - ${toolbarHeight}px)`,\r\n        width: '100vw',\r\n        overflow: 'auto',\r\n        [theme.breakpoints.up('md')]: {\r\n            width: `calc(100vw - ${drawerWidth}px)`,\r\n            // marginLeft: drawerWidth,\r\n        },\r\n    },\r\n\r\n}))\r\n\r\nconst AppLayout = (props) => {\r\n    \r\n    const classes = useStyles();\r\n    \r\n    // this is form mobile menu\r\n    const [drawerState, setDrawer] = React.useState({\r\n        left: false,\r\n    })\r\n    const toggleDrawer = (anchor, status) => (event) => {\r\n        setDrawer({[anchor]:status})\r\n    }\r\n\r\n    const appTitle = (\r\n        <Router_AppTitle {...props} />\r\n    );\r\n\r\n    const inAppMenu = (\r\n        <List className={classes.drawer}> \r\n            <AppsMenu {...props}/>\r\n            <Router_InAppSideMenu {...props}/>\r\n        </List>\r\n    );\r\n\r\n\r\n    return (\r\n        \r\n        <div className={classes.grow}>\r\n            <AppBar position='fixed' className={classes.appBar}>\r\n                <Toolbar className={classes.toolbar_height} >\r\n                <Hidden mdUp implementation=\"css\">\r\n                    <IconButton edge='start' onClick={toggleDrawer('left', true)} >\r\n                        <Menu  className={classes.toolbarIcon}/>\r\n                    </IconButton>\r\n                </Hidden>\r\n\r\n                    <Typography variant='h5' className={classes.title}>\r\n                        { appTitle }\r\n                    </Typography>\r\n\r\n                    <div className={classes.grow}></div>\r\n\r\n                    <IconButton edge='end'>\r\n                        <Notifications className={classes.toolbarIcon} />\r\n                    </IconButton>\r\n\r\n                    <IconButton edge='end'>\r\n                        <AccountBox className={classes.toolbarIcon} />\r\n                    </IconButton>\r\n\r\n                </Toolbar>\r\n\r\n            </AppBar>\r\n            \r\n            <div className={classes.navMenuContainer}>\r\n                {/* MOBILE NAV MENU */}\r\n                <SwipeableDrawer\r\n                    className={classes.drawerPaper}\r\n                    anchor={'left'} \r\n                    open={drawerState['left']}\r\n                    onOpen={toggleDrawer('left', true)} \r\n                    onClose={toggleDrawer('left', false)}\r\n                    // keeping it mounted is more efficient for mobile use  \r\n                    ModalProps={{keepMounted: true, }}>\r\n                        \r\n                    { inAppMenu }\r\n                    \r\n                </SwipeableDrawer>\r\n\r\n                {/* DESKTOP NAV MENU */}\r\n                <Hidden smDown implementation=\"css\">\r\n                    <Drawer\r\n                        className={classes.drawerPaper}\r\n                        // PaperProps={{ elevation: 10 }}\r\n                        variant='permanent'\r\n                        open>\r\n\r\n                        { inAppMenu }\r\n\r\n                    </Drawer>\r\n                </Hidden>\r\n            </div>\r\n            \r\n\r\n            <div className={classes.appBar}>\r\n                {/* class toolbar required to keep this app content below toolbar dynamically */}\r\n                <div className={classes.toolbar_height}></div>\r\n\r\n                {/* App Content here!! */}\r\n                <div className={classes.appContentWindow}>\r\n                    {props.children}\r\n                </div>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AppLayout;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\AppsMenu.js",["369","370","371"],"import {React, useState} from 'react'\r\nimport { Link } from '@reach/router'\r\nimport { Accordion, \r\n        AccordionSummary, \r\n        MenuItem, \r\n        makeStyles, \r\n        Toolbar, \r\n        Typography, \r\n        ClickAwayListener,\r\n        ListItemIcon} from '@material-ui/core'\r\n\r\nimport { Apps, Business, BusinessCenter, EmojiTransportation, HomeWork, LibraryBooks } from '@material-ui/icons'\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n    root: {\r\n        \"&.MuiAccordion-root\": {\r\n            backgroundColor: theme.palette.secondary.main,\r\n            boxShadow: \"none\",\r\n            color: theme.palette.secondary.contrastText\r\n        },\r\n        '&.Mui-expanded':{\r\n            margin: '0px'\r\n        }\r\n    },\r\n    grow: {\r\n        // width: '100%',\r\n        marginLeft: '10px',\r\n        fontWeight: '600'\r\n    },\r\n    noPadding: {\r\n        padding: '0px',\r\n        margin: '0px',\r\n        '&.MuiAccordionSummary-root.Mui-expanded':{\r\n            backgroundColor: 'transparent',\r\n            minHeight:'48px'\r\n        },\r\n        '& .MuiAccordionSummary-content':{\r\n            margin: '0px'\r\n        },\r\n        '& .Mui-expanded':{\r\n            margin: '0px',\r\n        },\r\n    },\r\n    appLink: {\r\n        paddingLeft: '25px',\r\n        '&.MuiMenuItem-root':{\r\n            minHeight: 'auto',\r\n            width: 'auto'\r\n        },\r\n        '&.Mui-selected':{\r\n            backgroundColor: theme.palette.secondary.dark,\r\n            // boxShadow: \"0px 0px 5px rgba(0,0,0,0.7);\"\r\n        },\r\n    },\r\n    appIcon: {\r\n        '&.MuiListItemIcon-root':{\r\n            minWidth:'35px'\r\n        }\r\n    },\r\n    link:{\r\n        color: theme.palette.secondary.contrastText,\r\n        textDecoration: 'none',\r\n        '& :hover':{\r\n            color: 'lightgrey'\r\n        },\r\n    },\r\n    toolbar_height:{\r\n        minHeight: 'auto',\r\n        '&.MuiToolbar-gutters':{\r\n            paddingLeft: '10px'\r\n        }\r\n    },\r\n\r\n}))\r\n\r\nconst AppsMenu = (props) => {\r\n    const classes = useStyles()\r\n\r\n    const [appsEpanded, setAppsExpanded] = useState(false)\r\n\r\n    const toggleAppsExpanded = () => {\r\n        setAppsExpanded(!appsEpanded)\r\n    }\r\n\r\n    const closeApps = () => {\r\n        setAppsExpanded(false)\r\n    }\r\n\r\n    const apps = [\r\n        {\r\n            'name':'Business Center',\r\n            'icon':<HomeWork />,\r\n            'url' :'/home'\r\n        },\r\n        {\r\n            'name':'Service Sheets',\r\n            'icon':<LibraryBooks />,\r\n            'url' :'/service_sheets'\r\n        }\r\n    ]\r\n\r\n    return(\r\n        <ClickAwayListener onClickAway={closeApps}>\r\n            <Accordion \r\n                id='AppsMenuContainer_for_reading_height'\r\n                square \r\n                expanded={appsEpanded} \r\n                className={classes.root} elevation={2}>\r\n\r\n                <AccordionSummary \r\n                    className={classes.noPadding} \r\n                    onClick={toggleAppsExpanded}>\r\n                    \r\n                    <Toolbar className={classes.toolbar_height}>\r\n                        <Apps />\r\n                        <Typography className={classes.grow} >\r\n                            Agri-Stor &nbsp;Apps\r\n                        </Typography>\r\n                    </Toolbar>\r\n\r\n                </AccordionSummary>\r\n\r\n\r\n            {/* APPS LIST BELOW!!! */}\r\n\r\n                {apps.map((app) => \r\n                    <Link key={app.url} to={app.url} className={classes.link}>\r\n                        <MenuItem \r\n                            className={classes.appLink} \r\n                            selected={app.url === props.location.pathname.slice(0,app.url.length)} \r\n                        >\r\n                            <ListItemIcon className={classes.appIcon} >\r\n                                {app.icon}\r\n                            </ListItemIcon>\r\n                            <Typography >\r\n                                {app.name}\r\n                            </Typography>\r\n                        </MenuItem>\r\n                    </Link>\r\n                )}\r\n\r\n            </Accordion>\r\n        </ClickAwayListener>\r\n    )\r\n}\r\n\r\nexport default AppsMenu;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\Router_AppTitle.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\Router_InAppSideMenu.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\InAppSideMenu.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\FormActionBar.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\FormActionButtons.js",["372"],"import { Button, ButtonGroup, Typography, ListItemIcon, makeStyles, Menu, MenuItem } from '@material-ui/core'\r\nimport { Comment, Flag, MoreVert, Publish, Save } from '@material-ui/icons'\r\nimport React from 'react'\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n    primaryBG:{\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    dangerousBG:{\r\n        backgroundColor: theme.palette.dangerousButton.main,\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    grayBG:{\r\n        backgroundColor: 'grey',\r\n        color: theme.palette.primary.contrastText\r\n    },\r\n    listIcons:{\r\n        '&.MuiListItemIcon-root':{\r\n            color: theme.palette.primary.contrastText,\r\n            minWidth:'40px'\r\n        }\r\n    },\r\n    moreMenu:{\r\n        '& .MuiMenu-paper':{\r\n            backgroundColor: 'grey',\r\n            color: theme.palette.primary.contrastText\r\n        }\r\n    }\r\n}))\r\n\r\nconst FormActionButtons = (props) => {\r\n    const form = props.form\r\n\r\n    const [moreActionsMenuAnchor, setMoreActionsMenuAnchor] = React.useState(null)\r\n\r\n    const classes = useStyles()\r\n\r\n    return(\r\n        \r\n        <div style={{width:'100%', textAlign:'center', display:'flex'}}>\r\n        {\r\n            // this will present different buttons for new forms vs updating a form\r\n            !form.id ? \r\n            <Button                             \r\n                onClick={() => props.submit(form)}\r\n                className={classes.primaryBG} \r\n                startIcon={<Publish />}\r\n                style={{width:'70vw', maxWidth:'600px', margin: 'auto'}}\r\n            >\r\n                Submit\r\n            </Button>\r\n            :\r\n            // <ButtonGroup size={'large'} >\r\n            <div\r\n                style={{width:'100%', textAlign:'center', display:'flex', justifyContent: 'center'}}\r\n            >\r\n\r\n                {/* <Button \r\n                    className={classes.grayBG} \r\n                    // startIcon={<ArrowBackIos />}\r\n                    >\r\n                    <ArrowBackIos />\r\n                </Button> */}\r\n                <Button \r\n                    onClick={() => props.update(form)}\r\n                    className={classes.primaryBG} \r\n                    startIcon={<Save />}  \r\n                    style={{width:'70vw', maxWidth:'500px', marginRight:'5px'}}\r\n                    >\r\n                    Save&nbsp;Changes\r\n                </Button>\r\n                <Button \r\n                    \r\n                    // aria-controls='more-service-form-actions-menu'\r\n                    onClick={(e)=>setMoreActionsMenuAnchor(e.currentTarget)}\r\n                    className={classes.grayBG} \r\n                    endIcon={<MoreVert />} \r\n                    style={{width:'150px', maxWidth:'30vw'}}\r\n                    >\r\n                    more\r\n                </Button>\r\n                <Menu\r\n                    className={classes.moreMenu} \r\n                    id='more-service-form-actions-menu'\r\n                    variant='menu'\r\n                    autoFocus={false}\r\n                    anchorEl={moreActionsMenuAnchor}\r\n                    open={moreActionsMenuAnchor !== null} \r\n                    onClose={()=>setMoreActionsMenuAnchor(null)}\r\n                    anchorOrigin={{\r\n                        vertical: 'center',\r\n                        horizontal: 'right',\r\n                      }}\r\n                      transformOrigin={{\r\n                        vertical: 'bottom',\r\n                        horizontal: 'center',\r\n                      }}\r\n                    >\r\n                    \r\n                        <MenuItem >\r\n                            <ListItemIcon className={classes.listIcons}>\r\n                                <Flag /> \r\n                            </ListItemIcon> \r\n                                <Typography> Flag Error </Typography>\r\n                            </MenuItem>\r\n                        <MenuItem >\r\n                            <ListItemIcon className={classes.listIcons}>\r\n                                <Comment /> \r\n                            </ListItemIcon>  \r\n                            <Typography>\r\n                                Comments\r\n                            </Typography>   \r\n                        </MenuItem>\r\n                </Menu>\r\n\r\n            </div>\r\n            // </ButtonGroup>\r\n        }\r\n        </div>\r\n    )\r\n}\r\nexport default FormActionButtons;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\globalComponents\\PopupTimeout.js",["373","374"],"import React, { useEffect } from 'react'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport { Typography } from '@material-ui/core'\r\n\r\n// PROPS\r\n//  isOpen = sets the state of whether it is visible or not\r\n//  timerMS = sets duration that the dialog is visible for in miliseconds\r\n//  children = injects the content as children usually does\r\n//  bgColor = sets the dialog background color\r\n\r\nconst PopupTimeout = (props) => {\r\n    // const [open, setOpen] = React.useState(false)\r\n    // setOpen(props.isOpen)\r\n    // const setup = () => \r\n\r\n    useEffect(()=>{\r\n        setTimeout(\r\n            ()=>props.onClose(false),\r\n            props.timerMS\r\n        )\r\n    },[props.isOpen])\r\n\r\n    return(\r\n        <Dialog open={props.isOpen} onClose={()=>props.onClose(false)}> \r\n            {props.children}\r\n            {/* <Typography> HERE IT IS!!! </Typography> */}\r\n        </Dialog>\r\n    )\r\n}\r\nexport default PopupTimeout;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\layouts\\AppSplash.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\data\\Reducer.js",["375"],"import {v4 as uuidv4} from 'uuid'\r\nimport AppDataLegend, { getServiceSheetStatusValue } from './AppDataLegend'\r\n\r\nimport fakeSheets from '../../fakeAPI/ServiceSheets'\r\n\r\n// service sheets app schema\r\n// [X] invoiced sheets will NOT be loaded into redux\r\n// sheetsInProcess:[]\r\n// selectedSheet:{obj} -> represents \r\n// drafts:[]  //these are ones that have not been submitted or changes that haven't been submitted\r\n// ........each draft object should contain a time stamp so a user knows how OLD it is AND the form itself\r\n// offlineErrors:[]  //will keep track of any failed submissions and will need to be dismissed... \r\n// ....................will be displayed under cloud queue section\r\n// tableSettings: {\r\n    // requests: {\r\n        // visibleColumns:[]\r\n        // }\r\n        // jobs:{}\r\n        // corporate:{}\r\n        // }\r\n        \r\n\r\n\r\nexport const selectSheetDrafts = state => state.serviceSheets.drafts\r\n\r\nexport const selectSheetRequests = state => {\r\n    return state.serviceSheets.sheetsInProcess.filter(s => s.status === getServiceSheetStatusValue('Requested'))\r\n}\r\n\r\nexport const selectSheetsJobs = state => {\r\n    return state.serviceSheets.sheetsInProcess.filter(s => parseInt(s.status) > 10 && parseInt(s.status) <= 60)\r\n}\r\n\r\nexport const selectSheetsCorporate = state => {\r\n    return state.serviceSheets.sheetsInProcess.filter(s => parseInt(s.status) >= 60 && parseInt(s.status) < 90)\r\n}\r\n\r\nexport const selectSheetsMyJobs = (state, myID) => {\r\n    return selectSheetsJobs(state).filter(s => s.lead_tech === myID || s.all_techs.filter(t => t.id === myID).length !== 0)\r\n}\r\n\r\nexport const selectSheetsByStatusValue = (state, value) => {\r\n    return state.serviceSheets.sheetsInProcess.filter(s => s.status === value)\r\n}\r\n\r\nconst initial = {\r\n    sheetsInProcess: fakeSheets(),\r\n    selectedSheet: undefined, //{} // must be set to undefined or will throw errors because it fools checks that it exists\r\n    drafts:fakeSheets(),\r\n    offlineErrors:[],\r\n    messagePopup:{ //use 'DISMISS_MESSAGE' to change state of popup\r\n        //type: '', //success - error - warning\r\n        //messages:[] //['message 1','message 2','message 3']\r\n    } \r\n}\r\n// console.log(fakeSheets)\r\n\r\nexport default function reducer(state = initial, action){\r\n    console.log('beginning reducer state...',state)\r\n    switch(action.type){\r\n\r\n        case 'SET_MESSAGE_POPUP':\r\n            console.log('message dismissed')\r\n            return {...state, messagePopup:{}}\r\n\r\n        case 'SET_SELECTED_SHEET':\r\n            console.log('setting selected sheet...')\r\n            return {...state, selectedSheet:action.payload}\r\n\r\n        case 'GET_SERVICE_SHEETS_IN_PROCESS':\r\n\r\n            return state\r\n        // case 'GET_SERVICE_SHEETS_COMMIT':\r\n            // return state\r\n        // ROLLBACK ??\r\n        \r\n        \r\n        case 'CREATE_SERVICE_SHEET':\r\n            console.log('creating!')\r\n            const newSheet = {...action.payload.serviceSheet,\r\n                // requested_by:'working1',\r\n                id: uuidv4(),\r\n                created_at_client: Date.now(),\r\n                created_by: '1234',\r\n            }\r\n            return {...state, \r\n                sheetsInProcess:[ newSheet, ...state.sheetsInProcess],\r\n                selectedSheet: newSheet, \r\n                messagePopup:{\r\n                    type:'success',\r\n                    messages:['Successfully Created!']\r\n                }\r\n            }\r\n\r\n        // case 'CREATE_SERVICE_SHEET_COMMIT':\r\n        // case 'CREATE_SERVICE_SHEET_ROLLBACK':\r\n\r\n\r\n        case 'UPDATE_SERVICE_SHEET':\r\n            // remove draftID\r\n            console.log('updating!!', action.payload)\r\n            const newState = {...state,\r\n                selectedSheet: action.payload.serviceSheet,\r\n                sheetsInProcess: [...state.sheetsInProcess.map(s => \r\n                    s.id === action.payload.serviceSheet.id ? action.payload.serviceSheet : s) \r\n                ],\r\n                messagePopup:{\r\n                    type:'success',\r\n                    messages:['Successfully Updated!']\r\n                }\r\n            }\r\n            console.log(newState)\r\n            return newState\r\n\r\n        // case 'UPDATE_SERVICE_SHEET_COMMIT':\r\n        // case 'UPDATE_SERVICE_SHEET_ROLLBACK':\r\n        \r\n        case 'CREATE_DRAFT':\r\n            // set timestamp for Last_Edited\r\n\r\n            // add draft to drafts: []\r\n\r\n            // set this sheet instance as the selectedSheet\r\n\r\n            return state\r\n\r\n        case 'UPDATE_DRAFT':\r\n\r\n\r\n            return state\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\data\\Actions.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\MessagePopup.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\Index_Router.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\Title.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\SideMenu.js",["376","377","378","379"],"import {List, ListItem, Menu, MenuItem} from '@material-ui/core'\r\nimport { BusinessCenter, Dashboard, People } from '@material-ui/icons'\r\nimport InAppSideMenu from '../layouts/InAppSideMenu'\r\n\r\nconst SideMenu = (props) => {\r\n\r\n    const menuContent = [\r\n        {\r\n            'appPath':'/home',\r\n            'icon':<Dashboard />,\r\n            'section':'Dashboard',\r\n            'sectionPath':'/dashboard',\r\n            'subSections': [\r\n                // {\r\n                //     'name':'page_1',\r\n                //     'url':'/page_1'\r\n                // },\r\n                // {\r\n                //     'name':'page_2',\r\n                //     'url':'/page_2'\r\n                // }\r\n            ]\r\n        },\r\n        {\r\n            'appPath':'/home',\r\n            'icon':<BusinessCenter />,\r\n            'section':\"Corporate\",\r\n            'sectionPath':'/corporate',\r\n            'subSections': [\r\n                {\r\n                    'name':'Dealers',\r\n                    'url':'/dealers'\r\n                },\r\n                {\r\n                    'name':'Departments',\r\n                    'url':'/departments'\r\n                },\r\n                {\r\n                    'name':'Users',\r\n                    'url':'/users'\r\n                },\r\n                {\r\n                    'name':'Catalog',\r\n                    'url':'/catalog'\r\n                },\r\n                {\r\n                    'name':'Purchases',\r\n                    'url':'/purchases'\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            'appPath':'/home',\r\n            'icon':<People />,\r\n            'section':\"Customers\",\r\n            'sectionPath':'/customers',\r\n            'subSections': [\r\n                {\r\n                    'name':'Storages',\r\n                    'url':'/storages'\r\n                },\r\n                {\r\n                    'name':'Equipment',\r\n                    'url':'/equipment'\r\n                },\r\n                {\r\n                    'name':'Events',\r\n                    'url':'/events'\r\n                },\r\n                {\r\n                    'name':'New Event +',\r\n                    'url':'/agristars'\r\n                },\r\n            ]\r\n        }\r\n    ]\r\n\r\n    return(\r\n        <InAppSideMenu \r\n            // icons={}\r\n            menuContent={menuContent} \r\n            location={props.location}\r\n        />\r\n    )\r\n}\r\nexport default SideMenu;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\views\\Home.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\globalComponents\\MainButton.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\fakeAPI\\Storages.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\fakeAPI\\ServiceSheets.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\fakeAPI\\Customers.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\data\\usersSlice.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\fakeAPI\\ServiceTechs.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\globalComponents\\FlexTable.js",["380","381","382","383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400"],"import React, { useState } from 'react'\r\n// import ButtonCreateSheet from './ButtonCreateSheet'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { IconButton, ButtonBase, Button } from '@material-ui/core'\r\nimport { Search, MoreVert, FilterList, AddBox, AddCircle, Add, SignalWifi1BarLockSharp, Settings, Flag, OfflineBoltSharp, CloudUpload, CheckCircle, Check, Error, ErrorOutline} from '@material-ui/icons'\r\nimport { makeStyles, Toolbar, Typography } from '@material-ui/core';\r\n// import FormButton from './FormButton';\r\n// import MainButton from './MainButton';\r\nimport { navigate } from '@reach/router';\r\n\r\n// NOTE!! -> decided to go with dataGrid from MUI library instead of building out this table, it is here though if it is required\r\n\r\n// PROPS \r\n// sheets - \r\n    //  they must be prefiltered to get only the intended sheets (ex. display requests must be filtered for only requests prior to display)\r\n    //  further more they must filtered in such a way that ones with errors that are in the next phase still show up in the previous\r\n// noRowsMessage - this will be displayed in place of \r\n\r\n\r\n// USAGE \r\n{/* <FlexTable path='/uploading'\r\n        rowKey={'id'}\r\n        rows={[\r\n                {'id':'1','title':'Red Fern', 'author':'Jimmy Hendricks', 'published_date':'1923'},\r\n                {'id':'2','title':'Book of Eli', 'author':'Denzel', 'published_date':'2003'},\r\n                {'id':'3','title':'Chunky Monkey', 'author':'Tarzan Helman', 'published_date':'1973'},\r\n                {'id':'4','title':'Tree of Life', 'author':'Billy Bob', 'published_date':<span style={{color:'green'}}>'1990'</span>},\r\n            ]}\r\n\r\n        fields={[\r\n            {'key':'title', 'title':'Title of Book', 'function':(r)=>console.log(r.id)},\r\n            {'key':'author', 'title':'Writer!'},\r\n            {'key':'published_date', 'title':'Published'}                        \r\n        ]}\r\n\r\n        firstColumn={[<Checkbox  />]}\r\n        firstHeader={{'test':((e)=><Checkbox checked={e} />)}}\r\n/> */}\r\n\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n    paper: {\r\n        // backgroundColor: theme.palette.primary.contrastText\r\n        margin: '10px',\r\n        maxWidth: '1200px',\r\n        // maxWidth: '100%',  \r\n        // padding: '10px',\r\n        // height: '1000px',\r\n        backgroundColor: 'white',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            margin: '0px',\r\n        }\r\n    },\r\n    tableHead: {\r\n        '&.MuiTableCell-head':{\r\n            color: theme.palette.primary.light,\r\n            fontWeight: '600'\r\n        }\r\n    },\r\n    table:{\r\n        // maxHeight: 'calc(100vh - 48px)',\r\n    },\r\n    grow: {\r\n        flexGrow: 2,\r\n    },\r\n    search: {\r\n        display: 'flex',\r\n        // padding: '1px 5px',\r\n        // background: 'grey'\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        // backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        // '&:hover': {\r\n        //   backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        // },\r\n        marginLeft: 0,\r\n        width: '150px',\r\n        [theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(1),\r\n          width: 'auto',\r\n        },\r\n        [theme.breakpoints.up('md')]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: '250px',\r\n          },\r\n        // background: theme.palette.info.light,\r\n        background: 'lightgrey',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'inherit'\r\n        },\r\n        display: 'none',\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 1),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        // pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    searchInput:{\r\n        marginLeft: '35px',\r\n        marginRight: '5px'\r\n    },\r\n    desktopOnly:{\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'inherit'\r\n        },\r\n        display: 'none'\r\n    },\r\n    cellPadding:{\r\n        '&.MuiTableCell-root':{\r\n            padding:'11px'\r\n        }\r\n    }\r\n}))\r\n\r\nconst NoRows = (props) => {\r\n    return(\r\n        <TableRow>\r\n            <TableCell style={{'textAlign': 'center', 'color':'grey'}} colSpan={4} >\r\n                <Typography variant='h6'>\r\n                    {props.noRowsMessage}\r\n                </Typography>\r\n            </TableCell>\r\n        </TableRow>\r\n    )\r\n}\r\n\r\nconst Rows = (props) => {\r\n    const classes = useStyles()\r\n\r\n    return(\r\n        props.rows.map(r => \r\n            <TableRow hover={true} key={r.id} >\r\n               { props.fields.map(f=>\r\n                    <TableCell >\r\n                        {r[f.key]}\r\n                    </TableCell >\r\n                )}\r\n            </TableRow>\r\n        )\r\n)}\r\n\r\n\r\n// PROPS to be passed in => tableData, tableTitle, tableHeaders?, \r\nconst Requests = (props) => {\r\n\r\n    const classes = useStyles()\r\n\r\n    return(\r\n        <React.Fragment>\r\n        <Paper className={classes.paper} elevation={3}>\r\n\r\n            <Toolbar className={classes.toolbar}>\r\n                {/* <ButtonCreateSheet label={'Request'}/> */}\r\n                {/* <Button startIcon={<Add />} color={'primary'} > sheet </Button> */}\r\n                {/* <FormButton >\r\n                    sheet\r\n                </FormButton> */}\r\n                {/* <MainButton\r\n                    startIcon={<Add />}\r\n                    size='large'\r\n                    onClick={()=>{navigate('/service_sheets/create')}}\r\n                >\r\n                    sheet &nbsp;\r\n                </MainButton> */}\r\n                \r\n                <div className={classes.grow} />\r\n                <div className={classes.search}>\r\n                    <div className={classes.searchIcon}>\r\n                        <Search />\r\n                    </div>\r\n                    <InputBase\r\n                        className={classes.searchInput}\r\n                        placeholder=\"Search…\"\r\n                        inputProps={{ 'aria-label': 'search' }}\r\n                    />\r\n                </div>\r\n                <IconButton \r\n                    // className={classes.desktopOnly}\r\n                    aria-label=\"display more actions\" \r\n                    edge=\"end\" \r\n                    color=\"inherit\"\r\n                >\r\n                    {/* <MoreVert /> */}\r\n                    {/* <FilterList /> */}\r\n                    <Settings />\r\n                </IconButton>\r\n            </Toolbar>\r\n\r\n            <TableContainer className={classes.table}>\r\n                <Table  >\r\n                    <TableHead >\r\n                        <TableRow >\r\n                                {props.firstColumn ? \r\n                                    <TableCell >{props.firstHeader.test(true )}</TableCell>\r\n                                    : ''\r\n                                }\r\n                                {\r\n                                    props.fields.map(f => \r\n                                        <TableCell className={classes.tableHead} >\r\n                                            {f.title}\r\n                                        </TableCell>\r\n                                    )\r\n                                }\r\n\r\n                        </TableRow>\r\n                    </TableHead>                \r\n                    <TableBody>\r\n\r\n                        { \r\n                            props.rows.length > 0 ? \r\n                                props.rows.map(r => \r\n                                    <TableRow hover={true} key={r[props.rowKey]} >\r\n                                        \r\n                                        {props.firstColumn ? \r\n                                            <TableCell >\r\n                                                { props.firstColumn.map(d => d ) }\r\n                                            </TableCell>\r\n                                            : ''\r\n                                        }\r\n                                        { props.fields.map(f=>\r\n                                            <TableCell >\r\n                                                {\r\n                                                    r[f.key]\r\n                                                }\r\n                                            </TableCell >\r\n                                        )}\r\n                                    </TableRow>\r\n                                )\r\n\r\n                            : <NoRows noRowsMessage={props.noRowsMessage}/> \r\n\r\n                        }\r\n                        \r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n        </Paper>\r\n        </React.Fragment>\r\n    )\r\n}\r\nexport default Requests;","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\data\\storagesSlice.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\data\\customersSlice.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appHome\\data\\partsSlice.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\fakeAPI\\Parts.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\data\\dataTemplates.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\data\\AppDataLegend.js",[],"C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\ToolbarForSheetsTable.js",["401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427"],"import React, { useState } from 'react'\r\nimport ButtonCreateSheet from './ButtonCreateSheet'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Table from '@material-ui/core/Table';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport { IconButton, ButtonBase, Button, ButtonGroup } from '@material-ui/core'\r\nimport { Search, Today, MoreVert, FilterList, AddBox, AddCircle, Add, SignalWifi1BarLockSharp, Settings, Flag, OfflineBoltSharp, CloudUpload, CheckCircle, Check, Error, ErrorOutline, Map, CalendarViewDay, CalendarToday, TableChart} from '@material-ui/icons'\r\nimport { makeStyles, Toolbar, Typography } from '@material-ui/core';\r\nimport FormButton from '../globalComponents/FormButton';\r\nimport MainButton from '../globalComponents/MainButton';\r\nimport { navigate } from '@reach/router';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n    paper: {\r\n        // backgroundColor: theme.palette.primary.contrastText\r\n        margin: '10px',\r\n        maxWidth: '1200px',\r\n        // maxWidth: '100%',  \r\n        // padding: '10px',\r\n        // height: '1000px',\r\n        backgroundColor: 'white',\r\n        [theme.breakpoints.down('sm')]: {\r\n            width: '100%',\r\n            margin: '0px',\r\n        }\r\n    },\r\n    tableHead: {\r\n        '&.MuiTableCell-head':{\r\n            color: theme.palette.primary.light,\r\n            fontWeight: '600'\r\n        }\r\n    },\r\n    table:{\r\n        // maxHeight: 'calc(100vh - 48px)',\r\n    },\r\n    grow: {\r\n        flexGrow: 2,\r\n    },\r\n    search: {\r\n        display: 'flex',\r\n        // padding: '1px 5px',\r\n        // background: 'grey'\r\n        position: 'relative',\r\n        borderRadius: theme.shape.borderRadius,\r\n        // backgroundColor: fade(theme.palette.common.white, 0.15),\r\n        // '&:hover': {\r\n        //   backgroundColor: fade(theme.palette.common.white, 0.25),\r\n        // },\r\n        marginLeft: 0,\r\n        width: '150px',\r\n        [theme.breakpoints.up('sm')]: {\r\n          marginLeft: theme.spacing(1),\r\n          width: 'auto',\r\n        },\r\n        [theme.breakpoints.up('md')]: {\r\n            marginLeft: theme.spacing(1),\r\n            width: '250px',\r\n          },\r\n        // background: theme.palette.info.light,\r\n        background: 'lightgrey',\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'inherit'\r\n        },\r\n        display: 'none',\r\n    },\r\n    searchIcon: {\r\n        padding: theme.spacing(0, 1),\r\n        height: '100%',\r\n        position: 'absolute',\r\n        // pointerEvents: 'none',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    searchInput:{\r\n        marginLeft: '35px',\r\n        marginRight: '5px'\r\n    },\r\n    desktopOnly:{\r\n        [theme.breakpoints.up('sm')]: {\r\n            display: 'inherit'\r\n        },\r\n        display: 'none'\r\n    },\r\n    cellPadding:{\r\n        '&.MuiTableCell-root':{\r\n            padding:'11px'\r\n        }\r\n    }\r\n}))\r\n\r\nconst ToolbarForSheetsTable = (props) => {\r\n    const classes = useStyles()\r\n    \r\n    return(\r\n        <Toolbar className={classes.toolbar}>\r\n            <MainButton\r\n                startIcon={<Add />}\r\n                size='large'\r\n                onClick={()=>{navigate('/service_sheets/create')}}\r\n            >\r\n                sheet \r\n            </MainButton>\r\n            <Typography color='primary' variant={'h5'} style={{marginLeft: '25px',fontStyle:'italic', fontWeight:'bolder'}}>\r\n                {props.title}\r\n            </Typography>\r\n            <div className={classes.grow} style={{display:'flex'}} >\r\n\r\n\r\n            <ButtonGroup variant='contained' style={{margin: 'auto'}}>\r\n                <IconButton size='small' >\r\n                    <TableChart />\r\n                </IconButton>\r\n                <IconButton size='small' >\r\n                    <Today />\r\n                </IconButton>\r\n                <IconButton size='small' >\r\n                    <Map />\r\n                </IconButton>\r\n                \r\n\r\n            </ButtonGroup>\r\n            </div>\r\n\r\n\r\n            <div className={classes.search}>\r\n                <div className={classes.searchIcon}>\r\n                    <Search />\r\n                </div>\r\n                <InputBase\r\n                    className={classes.searchInput}\r\n                    placeholder=\"Search…\"\r\n                    inputProps={{ 'aria-label': 'search' }}\r\n                />\r\n            </div>\r\n            <IconButton \r\n                aria-label=\"display more actions\" \r\n                edge=\"end\" \r\n                color=\"inherit\"\r\n            >\r\n                <Settings />\r\n            </IconButton>\r\n        </Toolbar>\r\n    )\r\n}\r\nexport default ToolbarForSheetsTable","C:\\Users\\Clint\\Desktop\\AgriStor\\practice_folder\\Technology_TestRun\\react_frontend\\src\\components\\appService\\views\\DataTable.js",["428","429","430","431","432","433"],"import { makeStyles, Paper, Toolbar } from \"@material-ui/core\"\r\nimport { DataGrid } from \"@material-ui/data-grid\"\r\n// import { selectSheetDrafts } from \"../data/Reducer\"\r\n// import { transformSheetsForTableView } from '../data/Reducer'\r\nimport produce from 'immer'\r\nimport { selectCustomersById } from \"../../appHome/data/customersSlice\"\r\nimport { selectStoragesById } from \"../../appHome/data/storagesSlice\"\r\nimport { getServiceSheetStatusName, getServiceSheetUrgencyName } from \"../data/AppDataLegend\"\r\n\r\nimport {drawerWidth, toolbarHeight} from '../../layouts/AppLayout'\r\nimport MainButton from \"../../globalComponents/MainButton\"\r\nimport { Add, Search, ErrorOutline, Flag, Check, CloudUpload  } from \"@material-ui/icons\"\r\nimport ToolbarForSheetsTable from \"../ToolbarForSheetsTable\"\r\n\r\nconst useStyles = makeStyles((theme)=> ({\r\n    paper: {\r\n        // backgroundColor: theme.palette.primary.contrastText\r\n        margin: '30px',\r\n        paddingBottom:'63px',\r\n        maxWidth: '1200px',\r\n        height:'100vh',\r\n        maxHeight: `calc(100vh - ${toolbarHeight}px - 60px)`,\r\n        backgroundColor: 'white',\r\n        [theme.breakpoints.down('sm')]: {\r\n            maxHeight: `calc(100vh - ${toolbarHeight}px - 1px)`,\r\n            width: '100%',\r\n            margin: '0px',\r\n        },\r\n        [theme.breakpoints.down('md')]: {\r\n            margin:'0px',\r\n            maxHeight: `calc(100vh - ${toolbarHeight}px - 1px)`,\r\n            width: '100%',\r\n            margin: '0px',\r\n        }\r\n    },\r\n    dataGrid:{\r\n        '&.MuiDataGrid-root':{\r\n            border: 'none'\r\n        },\r\n        '&.MuiDataGrid-root .MuiDataGrid-colCellTitle':{\r\n            color:theme.palette.primary.light,\r\n            fontSize:'15px',\r\n            fontWeight: '510',\r\n            textAlign: 'center'\r\n        }\r\n    }\r\n}))\r\n\r\nconst Drafts = (props) => {\r\n    const classes = useStyles()\r\n\r\n    const state = props.state\r\n    // const columns = props.columns\r\n    const sheets = props.serviceSheets\r\n\r\n    const fakeOfflineStatus = (t) => (t%4 === 0 ? 'pending':(t%5 === 0 ? 'failed':'success'))\r\n    const fakeOffline = (f) => {\r\n        switch(f.value){\r\n            case 'success':\r\n                return <Check style={{color: 'green'}}/>\r\n            case 'pending':\r\n                return <CloudUpload style={{color: 'orange'}} />\r\n            case 'failed': \r\n                return <ErrorOutline style={{color: 'red'}} />\r\n            default:\r\n                return\r\n        }\r\n    }\r\n\r\n    // takes a sheet object and adds in the fields necessary to make the data readable....\r\n    // .... eg. customer_id requires something like customer_name to accompany it\r\n    // ....NOTE! adding these fields with their plain text makes them SEARCHable and SORTable!!!!\r\n    const prepareDataSet = (sheets) => produce(sheets, newSheets => {\r\n        newSheets.map(ns => {\r\n            let customer = selectCustomersById(state, ns.customer_id)\r\n            ns.customer_name = customer ? customer.name : '- -'\r\n\r\n            let storage = selectStoragesById(state, ns.storage_id)\r\n            ns.storage_name = storage ? storage.name : ' - - '\r\n            \r\n            let status = getServiceSheetStatusName(ns.status)\r\n            ns.status_name = `(${ns.status}) ${status}`\r\n\r\n            ns.urgency_name = getServiceSheetUrgencyName(ns.urgency) || 'ERROR'\r\n            ns.created_at_client_yyyy_mm_dd = \r\n                `${new Date(parseInt(ns.created_at_client)).toLocaleString(\"ja-JP\")}`\r\n\r\n            //FAKE DATA \r\n            ns.uploading = fakeOfflineStatus(Math.floor(Math.random()*100))\r\n            return ns\r\n        })\r\n        return newSheets\r\n    })\r\n\r\n    const dataSet = prepareDataSet(sheets)\r\n\r\n    console.log('new sheets....', dataSet, sheets)\r\n\r\n\r\n\r\n    const columns = [\r\n        {field: 'customer_name', headerName:'Customer', width:170},\r\n        {field: 'storage_name', headerName:'Storage', width:170},\r\n        {field: 'urgency_name', headerName:'Urgency', width:120},\r\n        {field: 'status_name', headerName:'Status', width:170},\r\n        {field: 'created_at_client_yyyy_mm_dd', headerName:'Submitted', width:170},\r\n        {field: 'requested_by', headerName:'Requested By', width:170},\r\n        {field: 'flagged', headerName:' ', width:30,\r\n            renderCell: (f) => (f.value === true ? <Flag style={{color: 'red'}}/> : <span/>)\r\n        },\r\n        {field: 'uploading', headerName:' ', width:70,\r\n            renderCell: (f) => fakeOffline(f)\r\n        }\r\n    ]\r\n\r\n    return(\r\n        // <div style={{ height: '90vh', width: '100%' }} >\r\n            <Paper className={classes.paper} elevation={3}>\r\n                \r\n                <ToolbarForSheetsTable \r\n                    title={props.title}\r\n                />\r\n\r\n                <DataGrid  \r\n                    columns={columns}\r\n                    rows={dataSet}\r\n                    \r\n                    className={classes.dataGrid}\r\n                    \r\n                    density={'standard'}     \r\n                    hideFooter={true}\r\n                />\r\n\r\n\r\n            </Paper>\r\n    )\r\n}\r\nexport default Drafts\r\n\r\n  ",{"ruleId":"434","severity":1,"message":"435","line":9,"column":10,"nodeType":"436","messageId":"437","endLine":9,"endColumn":25},{"ruleId":"438","replacedBy":"439"},{"ruleId":"440","replacedBy":"441"},{"ruleId":"434","severity":1,"message":"442","line":1,"column":16,"nodeType":"436","messageId":"437","endLine":1,"endColumn":24},{"ruleId":"434","severity":1,"message":"443","line":15,"column":8,"nodeType":"436","messageId":"437","endLine":15,"endColumn":17},{"ruleId":"444","severity":1,"message":"445","line":47,"column":17,"nodeType":"446","endLine":47,"endColumn":54},{"ruleId":"444","severity":1,"message":"447","line":48,"column":17,"nodeType":"446","endLine":48,"endColumn":62},{"ruleId":"434","severity":1,"message":"448","line":4,"column":9,"nodeType":"436","messageId":"437","endLine":4,"endColumn":19},{"ruleId":"434","severity":1,"message":"442","line":2,"column":28,"nodeType":"436","messageId":"437","endLine":2,"endColumn":36},{"ruleId":"434","severity":1,"message":"449","line":3,"column":8,"nodeType":"436","messageId":"437","endLine":3,"endColumn":16},{"ruleId":"434","severity":1,"message":"450","line":6,"column":8,"nodeType":"436","messageId":"437","endLine":6,"endColumn":17},{"ruleId":"434","severity":1,"message":"451","line":15,"column":8,"nodeType":"436","messageId":"437","endLine":15,"endColumn":18},{"ruleId":"434","severity":1,"message":"452","line":16,"column":8,"nodeType":"436","messageId":"437","endLine":16,"endColumn":21},{"ruleId":"434","severity":1,"message":"453","line":17,"column":8,"nodeType":"436","messageId":"437","endLine":17,"endColumn":20},{"ruleId":"434","severity":1,"message":"454","line":18,"column":10,"nodeType":"436","messageId":"437","endLine":18,"endColumn":24},{"ruleId":"434","severity":1,"message":"455","line":19,"column":10,"nodeType":"436","messageId":"437","endLine":19,"endColumn":18},{"ruleId":"434","severity":1,"message":"456","line":20,"column":10,"nodeType":"436","messageId":"437","endLine":20,"endColumn":18},{"ruleId":"434","severity":1,"message":"457","line":22,"column":29,"nodeType":"436","messageId":"437","endLine":22,"endColumn":47},{"ruleId":"434","severity":1,"message":"458","line":23,"column":30,"nodeType":"436","messageId":"437","endLine":23,"endColumn":49},{"ruleId":"434","severity":1,"message":"459","line":45,"column":11,"nodeType":"436","messageId":"437","endLine":45,"endColumn":24},{"ruleId":"460","severity":1,"message":"461","line":50,"column":7,"nodeType":"462","endLine":50,"endColumn":14,"suggestions":"463"},{"ruleId":"434","severity":1,"message":"464","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":25},{"ruleId":"434","severity":1,"message":"465","line":11,"column":22,"nodeType":"436","messageId":"437","endLine":11,"endColumn":32},{"ruleId":"434","severity":1,"message":"466","line":11,"column":34,"nodeType":"436","messageId":"437","endLine":11,"endColumn":40},{"ruleId":"434","severity":1,"message":"467","line":12,"column":18,"nodeType":"436","messageId":"437","endLine":12,"endColumn":26},{"ruleId":"434","severity":1,"message":"468","line":12,"column":28,"nodeType":"436","messageId":"437","endLine":12,"endColumn":38},{"ruleId":"434","severity":1,"message":"469","line":12,"column":40,"nodeType":"436","messageId":"437","endLine":12,"endColumn":46},{"ruleId":"434","severity":1,"message":"470","line":12,"column":48,"nodeType":"436","messageId":"437","endLine":12,"endColumn":57},{"ruleId":"434","severity":1,"message":"471","line":12,"column":64,"nodeType":"436","messageId":"437","endLine":12,"endColumn":87},{"ruleId":"434","severity":1,"message":"472","line":12,"column":105,"nodeType":"436","messageId":"437","endLine":12,"endColumn":121},{"ruleId":"434","severity":1,"message":"473","line":12,"column":136,"nodeType":"436","messageId":"437","endLine":12,"endColumn":147},{"ruleId":"434","severity":1,"message":"474","line":12,"column":156,"nodeType":"436","messageId":"437","endLine":12,"endColumn":161},{"ruleId":"434","severity":1,"message":"475","line":14,"column":8,"nodeType":"436","messageId":"437","endLine":14,"endColumn":18},{"ruleId":"476","severity":1,"message":"477","line":77,"column":9,"nodeType":"478","messageId":"479","endLine":77,"endColumn":16},{"ruleId":"434","severity":1,"message":"480","line":167,"column":12,"nodeType":"436","messageId":"437","endLine":167,"endColumn":20},{"ruleId":"434","severity":1,"message":"481","line":167,"column":22,"nodeType":"436","messageId":"437","endLine":167,"endColumn":33},{"ruleId":"434","severity":1,"message":"442","line":1,"column":28,"nodeType":"436","messageId":"437","endLine":1,"endColumn":36},{"ruleId":"434","severity":1,"message":"482","line":1,"column":38,"nodeType":"436","messageId":"437","endLine":1,"endColumn":49},{"ruleId":"434","severity":1,"message":"483","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":16},{"ruleId":"434","severity":1,"message":"484","line":12,"column":8,"nodeType":"436","messageId":"437","endLine":12,"endColumn":13},{"ruleId":"434","severity":1,"message":"485","line":19,"column":8,"nodeType":"436","messageId":"437","endLine":19,"endColumn":14},{"ruleId":"434","severity":1,"message":"486","line":20,"column":8,"nodeType":"436","messageId":"437","endLine":20,"endColumn":15},{"ruleId":"434","severity":1,"message":"487","line":40,"column":18,"nodeType":"436","messageId":"437","endLine":40,"endColumn":29},{"ruleId":"434","severity":1,"message":"488","line":40,"column":31,"nodeType":"436","messageId":"437","endLine":40,"endColumn":39},{"ruleId":"434","severity":1,"message":"489","line":40,"column":81,"nodeType":"436","messageId":"437","endLine":40,"endColumn":85},{"ruleId":"434","severity":1,"message":"490","line":44,"column":10,"nodeType":"436","messageId":"437","endLine":44,"endColumn":22},{"ruleId":"434","severity":1,"message":"491","line":44,"column":24,"nodeType":"436","messageId":"437","endLine":44,"endColumn":28},{"ruleId":"434","severity":1,"message":"492","line":44,"column":30,"nodeType":"436","messageId":"437","endLine":44,"endColumn":34},{"ruleId":"434","severity":1,"message":"467","line":44,"column":36,"nodeType":"436","messageId":"437","endLine":44,"endColumn":44},{"ruleId":"434","severity":1,"message":"493","line":44,"column":46,"nodeType":"436","messageId":"437","endLine":44,"endColumn":53},{"ruleId":"434","severity":1,"message":"494","line":44,"column":55,"nodeType":"436","messageId":"437","endLine":44,"endColumn":59},{"ruleId":"434","severity":1,"message":"495","line":47,"column":10,"nodeType":"436","messageId":"437","endLine":47,"endColumn":23},{"ruleId":"434","severity":1,"message":"496","line":269,"column":11,"nodeType":"436","messageId":"437","endLine":269,"endColumn":23},{"ruleId":"460","severity":1,"message":"497","line":290,"column":7,"nodeType":"462","endLine":290,"endColumn":28,"suggestions":"498"},{"ruleId":"460","severity":1,"message":"499","line":295,"column":7,"nodeType":"462","endLine":295,"endColumn":9,"suggestions":"500"},{"ruleId":"434","severity":1,"message":"501","line":336,"column":11,"nodeType":"436","messageId":"437","endLine":336,"endColumn":21},{"ruleId":"502","severity":1,"message":"503","line":363,"column":26,"nodeType":"504","messageId":"479","endLine":363,"endColumn":28},{"ruleId":"460","severity":1,"message":"505","line":432,"column":7,"nodeType":"462","endLine":432,"endColumn":71,"suggestions":"506"},{"ruleId":"460","severity":1,"message":"507","line":437,"column":7,"nodeType":"462","endLine":437,"endColumn":42,"suggestions":"508"},{"ruleId":"502","severity":1,"message":"503","line":451,"column":33,"nodeType":"504","messageId":"479","endLine":451,"endColumn":35},{"ruleId":"460","severity":1,"message":"509","line":467,"column":7,"nodeType":"462","endLine":467,"endColumn":77,"suggestions":"510"},{"ruleId":"434","severity":1,"message":"511","line":482,"column":12,"nodeType":"436","messageId":"437","endLine":482,"endColumn":35},{"ruleId":"460","severity":1,"message":"512","line":509,"column":7,"nodeType":"462","endLine":509,"endColumn":20,"suggestions":"513"},{"ruleId":"460","severity":1,"message":"514","line":532,"column":7,"nodeType":"462","endLine":532,"endColumn":22,"suggestions":"515"},{"ruleId":"460","severity":1,"message":"516","line":567,"column":7,"nodeType":"462","endLine":567,"endColumn":13,"suggestions":"517"},{"ruleId":"518","severity":1,"message":"519","line":621,"column":41,"nodeType":"520","endLine":621,"endColumn":55},{"ruleId":"518","severity":1,"message":"519","line":670,"column":41,"nodeType":"520","endLine":670,"endColumn":55},{"ruleId":"502","severity":1,"message":"503","line":107,"column":52,"nodeType":"504","messageId":"479","endLine":107,"endColumn":54},{"ruleId":"434","severity":1,"message":"521","line":1,"column":17,"nodeType":"436","messageId":"437","endLine":1,"endColumn":26},{"ruleId":"434","severity":1,"message":"442","line":1,"column":28,"nodeType":"436","messageId":"437","endLine":1,"endColumn":36},{"ruleId":"434","severity":1,"message":"522","line":13,"column":9,"nodeType":"436","messageId":"437","endLine":13,"endColumn":23},{"ruleId":"434","severity":1,"message":"523","line":14,"column":9,"nodeType":"436","messageId":"437","endLine":14,"endColumn":12},{"ruleId":"434","severity":1,"message":"524","line":16,"column":10,"nodeType":"436","messageId":"437","endLine":16,"endColumn":26},{"ruleId":"434","severity":1,"message":"525","line":12,"column":10,"nodeType":"436","messageId":"437","endLine":12,"endColumn":17},{"ruleId":"434","severity":1,"message":"526","line":14,"column":10,"nodeType":"436","messageId":"437","endLine":14,"endColumn":14},{"ruleId":"434","severity":1,"message":"527","line":15,"column":15,"nodeType":"436","messageId":"437","endLine":15,"endColumn":24},{"ruleId":"434","severity":1,"message":"528","line":15,"column":26,"nodeType":"436","messageId":"437","endLine":15,"endColumn":43},{"ruleId":"434","severity":1,"message":"529","line":15,"column":45,"nodeType":"436","messageId":"437","endLine":15,"endColumn":52},{"ruleId":"434","severity":1,"message":"475","line":16,"column":8,"nodeType":"436","messageId":"437","endLine":16,"endColumn":18},{"ruleId":"434","severity":1,"message":"530","line":53,"column":24,"nodeType":"436","messageId":"437","endLine":53,"endColumn":37},{"ruleId":"460","severity":1,"message":"531","line":139,"column":7,"nodeType":"462","endLine":139,"endColumn":32,"suggestions":"532"},{"ruleId":"434","severity":1,"message":"521","line":1,"column":17,"nodeType":"436","messageId":"437","endLine":1,"endColumn":26},{"ruleId":"434","severity":1,"message":"523","line":2,"column":57,"nodeType":"436","messageId":"437","endLine":2,"endColumn":60},{"ruleId":"434","severity":1,"message":"533","line":2,"column":80,"nodeType":"436","messageId":"437","endLine":2,"endColumn":86},{"ruleId":"434","severity":1,"message":"534","line":2,"column":88,"nodeType":"436","messageId":"437","endLine":2,"endColumn":101},{"ruleId":"434","severity":1,"message":"535","line":2,"column":103,"nodeType":"436","messageId":"437","endLine":2,"endColumn":114},{"ruleId":"434","severity":1,"message":"536","line":2,"column":155,"nodeType":"436","messageId":"437","endLine":2,"endColumn":165},{"ruleId":"434","severity":1,"message":"537","line":2,"column":167,"nodeType":"436","messageId":"437","endLine":2,"endColumn":177},{"ruleId":"434","severity":1,"message":"538","line":2,"column":191,"nodeType":"436","messageId":"437","endLine":2,"endColumn":196},{"ruleId":"434","severity":1,"message":"539","line":2,"column":198,"nodeType":"436","messageId":"437","endLine":2,"endColumn":203},{"ruleId":"434","severity":1,"message":"540","line":2,"column":205,"nodeType":"436","messageId":"437","endLine":2,"endColumn":214},{"ruleId":"434","severity":1,"message":"541","line":2,"column":216,"nodeType":"436","messageId":"437","endLine":2,"endColumn":225},{"ruleId":"434","severity":1,"message":"542","line":2,"column":227,"nodeType":"436","messageId":"437","endLine":2,"endColumn":241},{"ruleId":"434","severity":1,"message":"543","line":2,"column":243,"nodeType":"436","messageId":"437","endLine":2,"endColumn":251},{"ruleId":"434","severity":1,"message":"544","line":2,"column":253,"nodeType":"436","messageId":"437","endLine":2,"endColumn":262},{"ruleId":"434","severity":1,"message":"545","line":4,"column":55,"nodeType":"436","messageId":"437","endLine":4,"endColumn":60},{"ruleId":"434","severity":1,"message":"546","line":4,"column":62,"nodeType":"436","messageId":"437","endLine":4,"endColumn":75},{"ruleId":"434","severity":1,"message":"529","line":4,"column":77,"nodeType":"436","messageId":"437","endLine":4,"endColumn":84},{"ruleId":"434","severity":1,"message":"547","line":4,"column":86,"nodeType":"436","messageId":"437","endLine":4,"endColumn":98},{"ruleId":"434","severity":1,"message":"548","line":4,"column":100,"nodeType":"436","messageId":"437","endLine":4,"endColumn":104},{"ruleId":"434","severity":1,"message":"549","line":5,"column":8,"nodeType":"436","messageId":"437","endLine":5,"endColumn":38},{"ruleId":"434","severity":1,"message":"550","line":62,"column":12,"nodeType":"436","messageId":"437","endLine":62,"endColumn":35},{"ruleId":"434","severity":1,"message":"551","line":63,"column":12,"nodeType":"436","messageId":"437","endLine":63,"endColumn":25},{"ruleId":"502","severity":1,"message":"503","line":67,"column":77,"nodeType":"504","messageId":"479","endLine":67,"endColumn":79},{"ruleId":"434","severity":1,"message":"448","line":1,"column":46,"nodeType":"436","messageId":"437","endLine":1,"endColumn":56},{"ruleId":"434","severity":1,"message":"470","line":2,"column":15,"nodeType":"436","messageId":"437","endLine":2,"endColumn":24},{"ruleId":"434","severity":1,"message":"552","line":20,"column":11,"nodeType":"436","messageId":"437","endLine":20,"endColumn":21},{"ruleId":"460","severity":1,"message":"553","line":26,"column":11,"nodeType":"554","endLine":26,"endColumn":73},{"ruleId":"460","severity":1,"message":"555","line":73,"column":7,"nodeType":"462","endLine":73,"endColumn":9,"suggestions":"556"},{"ruleId":"460","severity":1,"message":"555","line":77,"column":7,"nodeType":"462","endLine":77,"endColumn":16,"suggestions":"557"},{"ruleId":"434","severity":1,"message":"558","line":5,"column":5,"nodeType":"436","messageId":"437","endLine":5,"endColumn":9},{"ruleId":"434","severity":1,"message":"559","line":10,"column":33,"nodeType":"436","messageId":"437","endLine":10,"endColumn":39},{"ruleId":"434","severity":1,"message":"494","line":10,"column":56,"nodeType":"436","messageId":"437","endLine":10,"endColumn":60},{"ruleId":"460","severity":1,"message":"560","line":53,"column":7,"nodeType":"462","endLine":53,"endColumn":21,"suggestions":"561"},{"ruleId":"434","severity":1,"message":"522","line":9,"column":5,"nodeType":"436","messageId":"437","endLine":9,"endColumn":19},{"ruleId":"434","severity":1,"message":"562","line":10,"column":5,"nodeType":"436","messageId":"437","endLine":10,"endColumn":13},{"ruleId":"434","severity":1,"message":"563","line":17,"column":5,"nodeType":"436","messageId":"437","endLine":17,"endColumn":13},{"ruleId":"438","replacedBy":"564"},{"ruleId":"440","replacedBy":"565"},{"ruleId":"434","severity":1,"message":"521","line":1,"column":17,"nodeType":"436","messageId":"437","endLine":1,"endColumn":26},{"ruleId":"434","severity":1,"message":"544","line":2,"column":68,"nodeType":"436","messageId":"437","endLine":2,"endColumn":77},{"ruleId":"434","severity":1,"message":"525","line":2,"column":87,"nodeType":"436","messageId":"437","endLine":2,"endColumn":94},{"ruleId":"434","severity":1,"message":"470","line":3,"column":15,"nodeType":"436","messageId":"437","endLine":3,"endColumn":24},{"ruleId":"434","severity":1,"message":"566","line":3,"column":49,"nodeType":"436","messageId":"437","endLine":3,"endColumn":58},{"ruleId":"434","severity":1,"message":"567","line":4,"column":8,"nodeType":"436","messageId":"437","endLine":4,"endColumn":28},{"ruleId":"568","severity":1,"message":"569","line":17,"column":93,"nodeType":"462","messageId":"570","endLine":17,"endColumn":97},{"ruleId":"568","severity":1,"message":"569","line":18,"column":116,"nodeType":"462","messageId":"570","endLine":18,"endColumn":120},{"ruleId":"502","severity":1,"message":"503","line":48,"column":85,"nodeType":"504","messageId":"479","endLine":48,"endColumn":87},{"ruleId":"444","severity":1,"message":"571","line":102,"column":9,"nodeType":"446","endLine":102,"endColumn":39},{"ruleId":"444","severity":1,"message":"572","line":108,"column":13,"nodeType":"446","endLine":108,"endColumn":47},{"ruleId":"434","severity":1,"message":"573","line":12,"column":16,"nodeType":"436","messageId":"437","endLine":12,"endColumn":24},{"ruleId":"434","severity":1,"message":"574","line":12,"column":26,"nodeType":"436","messageId":"437","endLine":12,"endColumn":40},{"ruleId":"434","severity":1,"message":"575","line":12,"column":42,"nodeType":"436","messageId":"437","endLine":12,"endColumn":61},{"ruleId":"434","severity":1,"message":"487","line":1,"column":18,"nodeType":"436","messageId":"437","endLine":1,"endColumn":29},{"ruleId":"434","severity":1,"message":"448","line":3,"column":10,"nodeType":"436","messageId":"437","endLine":3,"endColumn":20},{"ruleId":"460","severity":1,"message":"576","line":21,"column":7,"nodeType":"462","endLine":21,"endColumn":21,"suggestions":"577"},{"ruleId":"434","severity":1,"message":"578","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":21},{"ruleId":"434","severity":1,"message":"579","line":1,"column":9,"nodeType":"436","messageId":"437","endLine":1,"endColumn":13},{"ruleId":"434","severity":1,"message":"580","line":1,"column":15,"nodeType":"436","messageId":"437","endLine":1,"endColumn":23},{"ruleId":"434","severity":1,"message":"489","line":1,"column":25,"nodeType":"436","messageId":"437","endLine":1,"endColumn":29},{"ruleId":"434","severity":1,"message":"562","line":1,"column":31,"nodeType":"436","messageId":"437","endLine":1,"endColumn":39},{"ruleId":"434","severity":1,"message":"442","line":1,"column":17,"nodeType":"436","messageId":"437","endLine":1,"endColumn":25},{"ruleId":"434","severity":1,"message":"465","line":11,"column":22,"nodeType":"436","messageId":"437","endLine":11,"endColumn":32},{"ruleId":"434","severity":1,"message":"466","line":11,"column":34,"nodeType":"436","messageId":"437","endLine":11,"endColumn":40},{"ruleId":"434","severity":1,"message":"467","line":12,"column":18,"nodeType":"436","messageId":"437","endLine":12,"endColumn":26},{"ruleId":"434","severity":1,"message":"468","line":12,"column":28,"nodeType":"436","messageId":"437","endLine":12,"endColumn":38},{"ruleId":"434","severity":1,"message":"469","line":12,"column":40,"nodeType":"436","messageId":"437","endLine":12,"endColumn":46},{"ruleId":"434","severity":1,"message":"470","line":12,"column":48,"nodeType":"436","messageId":"437","endLine":12,"endColumn":57},{"ruleId":"434","severity":1,"message":"581","line":12,"column":59,"nodeType":"436","messageId":"437","endLine":12,"endColumn":62},{"ruleId":"434","severity":1,"message":"471","line":12,"column":64,"nodeType":"436","messageId":"437","endLine":12,"endColumn":87},{"ruleId":"434","severity":1,"message":"491","line":12,"column":99,"nodeType":"436","messageId":"437","endLine":12,"endColumn":103},{"ruleId":"434","severity":1,"message":"472","line":12,"column":105,"nodeType":"436","messageId":"437","endLine":12,"endColumn":121},{"ruleId":"434","severity":1,"message":"582","line":12,"column":123,"nodeType":"436","messageId":"437","endLine":12,"endColumn":134},{"ruleId":"434","severity":1,"message":"473","line":12,"column":136,"nodeType":"436","messageId":"437","endLine":12,"endColumn":147},{"ruleId":"434","severity":1,"message":"583","line":12,"column":149,"nodeType":"436","messageId":"437","endLine":12,"endColumn":154},{"ruleId":"434","severity":1,"message":"474","line":12,"column":156,"nodeType":"436","messageId":"437","endLine":12,"endColumn":161},{"ruleId":"434","severity":1,"message":"584","line":12,"column":163,"nodeType":"436","messageId":"437","endLine":12,"endColumn":175},{"ruleId":"434","severity":1,"message":"585","line":16,"column":10,"nodeType":"436","messageId":"437","endLine":16,"endColumn":18},{"ruleId":"586","severity":1,"message":"587","line":28,"column":1,"nodeType":"588","messageId":"589","endLine":45,"endColumn":7},{"ruleId":"476","severity":1,"message":"477","line":99,"column":9,"nodeType":"478","messageId":"479","endLine":99,"endColumn":16},{"ruleId":"434","severity":1,"message":"590","line":139,"column":7,"nodeType":"436","messageId":"437","endLine":139,"endColumn":11},{"ruleId":"434","severity":1,"message":"591","line":140,"column":11,"nodeType":"436","messageId":"437","endLine":140,"endColumn":18},{"ruleId":"434","severity":1,"message":"442","line":1,"column":17,"nodeType":"436","messageId":"437","endLine":1,"endColumn":25},{"ruleId":"434","severity":1,"message":"464","line":2,"column":8,"nodeType":"436","messageId":"437","endLine":2,"endColumn":25},{"ruleId":"434","severity":1,"message":"538","line":3,"column":8,"nodeType":"436","messageId":"437","endLine":3,"endColumn":13},{"ruleId":"434","severity":1,"message":"539","line":4,"column":8,"nodeType":"436","messageId":"437","endLine":4,"endColumn":13},{"ruleId":"434","severity":1,"message":"542","line":5,"column":8,"nodeType":"436","messageId":"437","endLine":5,"endColumn":22},{"ruleId":"434","severity":1,"message":"592","line":6,"column":8,"nodeType":"436","messageId":"437","endLine":6,"endColumn":17},{"ruleId":"434","severity":1,"message":"540","line":7,"column":8,"nodeType":"436","messageId":"437","endLine":7,"endColumn":17},{"ruleId":"434","severity":1,"message":"543","line":8,"column":8,"nodeType":"436","messageId":"437","endLine":8,"endColumn":16},{"ruleId":"434","severity":1,"message":"541","line":9,"column":8,"nodeType":"436","messageId":"437","endLine":9,"endColumn":17},{"ruleId":"434","severity":1,"message":"465","line":11,"column":22,"nodeType":"436","messageId":"437","endLine":11,"endColumn":32},{"ruleId":"434","severity":1,"message":"466","line":11,"column":34,"nodeType":"436","messageId":"437","endLine":11,"endColumn":40},{"ruleId":"434","severity":1,"message":"467","line":12,"column":25,"nodeType":"436","messageId":"437","endLine":12,"endColumn":33},{"ruleId":"434","severity":1,"message":"468","line":12,"column":35,"nodeType":"436","messageId":"437","endLine":12,"endColumn":45},{"ruleId":"434","severity":1,"message":"469","line":12,"column":47,"nodeType":"436","messageId":"437","endLine":12,"endColumn":53},{"ruleId":"434","severity":1,"message":"470","line":12,"column":55,"nodeType":"436","messageId":"437","endLine":12,"endColumn":64},{"ruleId":"434","severity":1,"message":"471","line":12,"column":71,"nodeType":"436","messageId":"437","endLine":12,"endColumn":94},{"ruleId":"434","severity":1,"message":"491","line":12,"column":106,"nodeType":"436","messageId":"437","endLine":12,"endColumn":110},{"ruleId":"434","severity":1,"message":"472","line":12,"column":112,"nodeType":"436","messageId":"437","endLine":12,"endColumn":128},{"ruleId":"434","severity":1,"message":"582","line":12,"column":130,"nodeType":"436","messageId":"437","endLine":12,"endColumn":141},{"ruleId":"434","severity":1,"message":"473","line":12,"column":143,"nodeType":"436","messageId":"437","endLine":12,"endColumn":154},{"ruleId":"434","severity":1,"message":"583","line":12,"column":156,"nodeType":"436","messageId":"437","endLine":12,"endColumn":161},{"ruleId":"434","severity":1,"message":"474","line":12,"column":163,"nodeType":"436","messageId":"437","endLine":12,"endColumn":168},{"ruleId":"434","severity":1,"message":"584","line":12,"column":170,"nodeType":"436","messageId":"437","endLine":12,"endColumn":182},{"ruleId":"434","severity":1,"message":"593","line":12,"column":189,"nodeType":"436","messageId":"437","endLine":12,"endColumn":204},{"ruleId":"434","severity":1,"message":"594","line":12,"column":206,"nodeType":"436","messageId":"437","endLine":12,"endColumn":219},{"ruleId":"434","severity":1,"message":"475","line":14,"column":8,"nodeType":"436","messageId":"437","endLine":14,"endColumn":18},{"ruleId":"476","severity":1,"message":"477","line":71,"column":9,"nodeType":"478","messageId":"479","endLine":71,"endColumn":16},{"ruleId":"434","severity":1,"message":"486","line":1,"column":29,"nodeType":"436","messageId":"437","endLine":1,"endColumn":36},{"ruleId":"434","severity":1,"message":"595","line":10,"column":9,"nodeType":"436","messageId":"437","endLine":10,"endColumn":20},{"ruleId":"434","severity":1,"message":"596","line":11,"column":8,"nodeType":"436","messageId":"437","endLine":11,"endColumn":18},{"ruleId":"434","severity":1,"message":"581","line":12,"column":10,"nodeType":"436","messageId":"437","endLine":12,"endColumn":13},{"ruleId":"434","severity":1,"message":"597","line":12,"column":15,"nodeType":"436","messageId":"437","endLine":12,"endColumn":21},{"ruleId":"476","severity":1,"message":"598","line":33,"column":13,"nodeType":"478","messageId":"479","endLine":33,"endColumn":19},"no-unused-vars","'applyMiddleware' is defined but never used.","Identifier","unusedVar","no-native-reassign",["599"],"no-negated-in-lhs",["600"],"'useState' is defined but never used.","'AppSplash' is defined but never used.","react/jsx-pascal-case","Imported JSX component DashboardApp_Router must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component ServiceApp_Router must be in PascalCase or SCREAMING_SNAKE_CASE","'Typography' is defined but never used.","'Requests' is defined but never used.","'FlexTable' is defined but never used.","'fakeSheets' is defined but never used.","'fakeCustomers' is defined but never used.","'fakeStorages' is defined but never used.","'selectUserById' is defined but never used.","'Checkbox' is defined but never used.","'DataGrid' is defined but never used.","'selectStoragesById' is defined but never used.","'selectCustomersById' is defined but never used.","'serviceSheets' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'selectedSheet'. Either include it or remove the dependency array.","ArrayExpression",["601"],"'ButtonCreateSheet' is defined but never used.","'ButtonBase' is defined but never used.","'Button' is defined but never used.","'MoreVert' is defined but never used.","'FilterList' is defined but never used.","'AddBox' is defined but never used.","'AddCircle' is defined but never used.","'SignalWifi1BarLockSharp' is defined but never used.","'OfflineBoltSharp' is defined but never used.","'CheckCircle' is defined but never used.","'Error' is defined but never used.","'FormButton' is defined but never used.","no-dupe-keys","Duplicate key 'display'.","ObjectExpression","unexpected","'requests' is assigned a value but never used.","'setRequests' is assigned a value but never used.","'useCallback' is defined but never used.","'Debounce' is defined but never used.","'Event' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'ButtonGroup' is defined but never used.","'debounce' is defined but never used.","'Menu' is defined but never used.","'ArrowBackIos' is defined but never used.","'Flag' is defined but never used.","'More' is defined but never used.","'Publish' is defined but never used.","'Save' is defined but never used.","'globalHistory' is defined but never used.","'partsCatalog' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refreshForm'. Either include it or remove the dependency array.",["602"],"React Hook useEffect has a missing dependency: 'props.unMountSelected'. Either include it or remove the dependency array.",["603"],"'removePart' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.",["604"],"React Hook useEffect has missing dependencies: 'errors' and 'validateStorage'. Either include them or remove the dependency array. You can also do a functional update 'setErrors(e => ...)' if you only need 'errors' in the 'setErrors' call.",["605"],"React Hook useEffect has missing dependencies: 'calculateElapsedHours' and 'isValidFinishDateTime'. Either include them or remove the dependency array.",["606"],"'approvalSectionIsHidden' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'setAccordionsExpanded' and 'setHiddenSections'. Either include them or remove the dependency array.",["607"],"React Hook useEffect has missing dependencies: 'form', 'getIsOriginalForm', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["608"],"React Hook useEffect has missing dependencies: 'displayForm', 'getIsOriginalForm', and 'isOrignalForm'. Either include them or remove the dependency array.",["609"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useEffect' is defined but never used.","'InputAdornment' is defined but never used.","'Box' is defined but never used.","'formatDiagnostic' is defined but never used.","'Divider' is defined but never used.","'keys' is defined but never used.","'Backspace' is defined but never used.","'BackspaceOutlined' is defined but never used.","'DoneAll' is defined but never used.","'setTasksTotal' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'preSeasonIsCompleted'. Either include it or remove the dependency array.",["610"],"'Dialog' is defined but never used.","'DialogContent' is defined but never used.","'DialogTitle' is defined but never used.","'IconButton' is defined but never used.","'InputLabel' is defined but never used.","'Paper' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableRow' is defined but never used.","'TextField' is defined but never used.","'Clear' is defined but never used.","'DeleteForever' is defined but never used.","'DoneOutlined' is defined but never used.","'Edit' is defined but never used.","'DialogRefrigerationUnitStartUp' is defined but never used.","'refrigerationDialogOpen' is assigned a value but never used.","'selectedIndex' is assigned a value but never used.","'getRefUnit' is assigned a value but never used.","The 'compressors' conditional could make the dependencies of useEffect Hook (at line 81) change on every render. To fix this, wrap the initialization of 'compressors' in its own useMemo() Hook.","VariableDeclarator","React Hook useEffect has a missing dependency: 'index'. Either include it or remove the dependency array.",["611"],["612"],"'Fade' is defined but never used.","'Delete' is defined but never used.","React Hook useEffect has a missing dependency: 'unitNickname'. Either include it or remove the dependency array.",["613"],"'MenuItem' is defined but never used.","'ClearAll' is defined but never used.",["599"],["600"],"'ExitToApp' is defined but never used.","'SingleInputAndButton' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","Imported JSX component Router_AppTitle must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Router_InAppSideMenu must be in PascalCase or SCREAMING_SNAKE_CASE","'Business' is defined but never used.","'BusinessCenter' is defined but never used.","'EmojiTransportation' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["614"],"'AppDataLegend' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'Add' is defined but never used.","'CloudUpload' is defined but never used.","'Check' is defined but never used.","'ErrorOutline' is defined but never used.","'navigate' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'Rows' is assigned a value but never used.","'classes' is assigned a value but never used.","'TableHead' is defined but never used.","'CalendarViewDay' is defined but never used.","'CalendarToday' is defined but never used.","'drawerWidth' is defined but never used.","'MainButton' is defined but never used.","'Search' is defined but never used.","Duplicate key 'margin'.","no-global-assign","no-unsafe-negation",{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},{"desc":"619","fix":"620"},{"desc":"621","fix":"622"},{"desc":"623","fix":"624"},{"desc":"625","fix":"626"},{"desc":"627","fix":"628"},{"desc":"629","fix":"630"},{"desc":"631","fix":"632"},{"desc":"633","fix":"634"},{"desc":"635","fix":"636"},{"desc":"637","fix":"638"},{"desc":"639","fix":"640"},{"desc":"641","fix":"642"},"Update the dependencies array to be: [selectedSheet, state]",{"range":"643","text":"644"},"Update the dependencies array to be: [props.selectedSheet, refreshForm]",{"range":"645","text":"646"},"Update the dependencies array to be: [props.unMountSelected]",{"range":"647","text":"648"},"Update the dependencies array to be: [form, form.all_techs, form.travel_hours, form.travel_hours_no_charge]",{"range":"649","text":"650"},"Update the dependencies array to be: [form.storage_id, form.customer_id, errors, validateStorage]",{"range":"651","text":"652"},"Update the dependencies array to be: [form.start_date, form.start_time, form.finish_date, form.finish_time, isValidFinishDateTime, calculateElapsedHours]",{"range":"653","text":"654"},"Update the dependencies array to be: [form.status, setAccordionsExpanded, setHiddenSections]",{"range":"655","text":"656"},"Update the dependencies array to be: [form, getIsOriginalForm, isOrignalForm, props]",{"range":"657","text":"658"},"Update the dependencies array to be: [displayForm, form, getIsOriginalForm, isOrignalForm]",{"range":"659","text":"660"},"Update the dependencies array to be: [preSeasonIsCompleted, props.preSeasonFormData]",{"range":"661","text":"662"},"Update the dependencies array to be: [index]",{"range":"663","text":"664"},"Update the dependencies array to be: [index, refUnit]",{"range":"665","text":"666"},"Update the dependencies array to be: [refUnitIndex, unitNickname]",{"range":"667","text":"668"},"Update the dependencies array to be: [props, props.isOpen]",{"range":"669","text":"670"},[2041,2048],"[selectedSheet, state]",[9619,9640],"[props.selectedSheet, refreshForm]",[9789,9791],"[props.unMountSelected]",[14533,14597],"[form, form.all_techs, form.travel_hours, form.travel_hours_no_charge]",[14725,14760],"[form.storage_id, form.customer_id, errors, validateStorage]",[15826,15896],"[form.start_date, form.start_time, form.finish_date, form.finish_time, isValidFinishDateTime, calculateElapsedHours]",[17606,17619],"[form.status, setAccordionsExpanded, setHiddenSections]",[18503,18518],"[form, getIsOriginalForm, isOrignalForm, props]",[19948,19954],"[displayForm, form, getIsOriginalForm, isOrignalForm]",[4655,4680],"[preSeasonIsCompleted, props.preSeasonFormData]",[2647,2649],"[index]",[2740,2749],"[index, refUnit]",[1543,1557],"[refUnitIndex, unitNickname]",[671,685],"[props, props.isOpen]"]